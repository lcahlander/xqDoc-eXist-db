<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2019-05-14T12:08:24.519-04:00</xqdoc:date>
    <xqdoc:location>/db/apps/shared-resources/content/templates.xql</xqdoc:location>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://exist-db.org/xquery/templates</xqdoc:uri>
    <xqdoc:name>templates</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>HTML templating module</xqdoc:description>
      <xqdoc:version> 2.1
 </xqdoc:version>
      <xqdoc:author> Wolfgang Meier
 </xqdoc:author>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:functions>
    <xqdoc:function>
      <xqdoc:name>templates:apply</xqdoc:name>
      <xqdoc:signature>templates:apply($content as node()+, $resolver as function(*), $model as map(*)?) as item()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description>Start processing the provided content. Template functions are looked up by calling the
 provided function $resolver. The function should take a name as a string
 and return the corresponding function item. The simplest implementation of this function could
 look like this:

 &lt;pre&gt;function($functionName as xs:string, $arity as xs:int) { function-lookup(xs:QName($functionName), $arity) }&lt;/pre&gt;</xqdoc:description>
        <xqdoc:param>$content+ the sequence of nodes which will be processed</xqdoc:param>
        <xqdoc:param>$resolver a function which takes a name and returns a function with that name</xqdoc:param>
        <xqdoc:param>$model? a sequence of items which will be passed to all called template functions. Use this to pass
 information between templating instructions.</xqdoc:param>
        <xqdoc:return>item()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:apply</xqdoc:name>
      <xqdoc:signature>templates:apply($content as node()+, $resolver as function(*), $model as map(*)?, $configuration as map(*)?) as item()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description>Start processing the provided content. Template functions are looked up by calling the
 provided function $resolver. The function should take a name as a string
 and return the corresponding function item. The simplest implementation of this function could
 look like this:

 &lt;pre&gt;function($functionName as xs:string, $arity as xs:int) { function-lookup(xs:QName($functionName), $arity) }&lt;/pre&gt;</xqdoc:description>
        <xqdoc:param>$content+ the sequence of nodes which will be processed</xqdoc:param>
        <xqdoc:param>$resolver a function which takes a name and returns a function with that name</xqdoc:param>
        <xqdoc:param>$model? a sequence of items which will be passed to all called template functions. Use this to pass
 information between templating instructions.</xqdoc:param>
        <xqdoc:param>$configuration? a map of configuration parameters. For example you may provide a
  'parameter value resolver' by mapping $templates:CONFIG_PARAM_RESOLVER to a function
  whoose job it is to provide values for templated parameters. The function signature for
  the 'parameter value resolver' is f($param-name as xs:string) as item()*</xqdoc:param>
        <xqdoc:return>item()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:copy-node</xqdoc:name>
      <xqdoc:signature>templates:copy-node($node as element(), $model as item()*) as item()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:param>$node </xqdoc:param>
        <xqdoc:param>$model* </xqdoc:param>
        <xqdoc:return>item()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:each</xqdoc:name>
      <xqdoc:signature>templates:each($node as node(), $model as map(*), $from as xs:string, $to as xs:string) as item()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:param>$node </xqdoc:param>
        <xqdoc:param>$model </xqdoc:param>
        <xqdoc:param>$from </xqdoc:param>
        <xqdoc:param>$to </xqdoc:param>
        <xqdoc:return>item()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:error-description</xqdoc:name>
      <xqdoc:signature>templates:error-description($node as node(), $model as map(*)) as item()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:param>$node </xqdoc:param>
        <xqdoc:param>$model </xqdoc:param>
        <xqdoc:return>item()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:form-control</xqdoc:name>
      <xqdoc:signature>templates:form-control($node as node(), $model as map(*)) as node()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description>Processes input and select form controls, setting their value/selection to
values found in the request - if present.</xqdoc:description>
        <xqdoc:param>$node </xqdoc:param>
        <xqdoc:param>$model </xqdoc:param>
        <xqdoc:return>node()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:get-app-root</xqdoc:name>
      <xqdoc:signature>templates:get-app-root($model as map(*)) as xs:string?</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:param>$model </xqdoc:param>
        <xqdoc:return>xs:string?</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:get-root</xqdoc:name>
      <xqdoc:signature>templates:get-root($model as map(*)) as xs:string?</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:param>$model </xqdoc:param>
        <xqdoc:return>xs:string?</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:if-attribute-set</xqdoc:name>
      <xqdoc:signature>templates:if-attribute-set($node as node(), $model as map(*), $attribute as xs:string) as item()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:param>$node </xqdoc:param>
        <xqdoc:param>$model </xqdoc:param>
        <xqdoc:param>$attribute </xqdoc:param>
        <xqdoc:return>item()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:if-model-key-equals</xqdoc:name>
      <xqdoc:signature>templates:if-model-key-equals($node as node(), $model as map(*), $key as xs:string, $value as xs:string) as item()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:param>$node </xqdoc:param>
        <xqdoc:param>$model </xqdoc:param>
        <xqdoc:param>$key </xqdoc:param>
        <xqdoc:param>$value </xqdoc:param>
        <xqdoc:return>item()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:if-module-missing</xqdoc:name>
      <xqdoc:signature>templates:if-module-missing($node as node(), $model as map(*), $uri as xs:string, $at as xs:string) as item()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description>Evaluate the enclosed block if there's a model property $key equal to $value.</xqdoc:description>
        <xqdoc:param>$node </xqdoc:param>
        <xqdoc:param>$model </xqdoc:param>
        <xqdoc:param>$uri </xqdoc:param>
        <xqdoc:param>$at </xqdoc:param>
        <xqdoc:return>item()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:if-parameter-set</xqdoc:name>
      <xqdoc:signature>templates:if-parameter-set($node as node(), $model as map(*), $param as xs:string) as node()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:param>$node </xqdoc:param>
        <xqdoc:param>$model </xqdoc:param>
        <xqdoc:param>$param </xqdoc:param>
        <xqdoc:return>node()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:if-parameter-unset</xqdoc:name>
      <xqdoc:signature>templates:if-parameter-unset($node as node(), $model as item()*, $param as xs:string) as node()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:param>$node </xqdoc:param>
        <xqdoc:param>$model* </xqdoc:param>
        <xqdoc:param>$param </xqdoc:param>
        <xqdoc:return>node()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:include</xqdoc:name>
      <xqdoc:signature>templates:include($node as node(), $model as map(*), $path as xs:string) as item()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:param>$node </xqdoc:param>
        <xqdoc:param>$model </xqdoc:param>
        <xqdoc:param>$path </xqdoc:param>
        <xqdoc:return>item()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:link-to-app</xqdoc:name>
      <xqdoc:signature>templates:link-to-app($uri as xs:string, $relLink as xs:string?) as xs:string</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description>Locates the package identified by $uri and returns a path which can be used to link
 to this package from within the HTML view of another package.

 $uri the unique name of the package to locate
 $relLink a relative path to be added to the returned path</xqdoc:description>
        <xqdoc:param>$uri </xqdoc:param>
        <xqdoc:param>$relLink? </xqdoc:param>
        <xqdoc:return>xs:string</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:load-source</xqdoc:name>
      <xqdoc:signature>templates:load-source($node as node(), $model as map(*)) as node()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:param>$node </xqdoc:param>
        <xqdoc:param>$model </xqdoc:param>
        <xqdoc:return>node()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:process</xqdoc:name>
      <xqdoc:signature>templates:process($nodes as node()*, $model as map(*)) as item()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description>Continue template processing on the given set of nodes. Call this function from
 within other template functions to enable recursive processing of templates.</xqdoc:description>
        <xqdoc:param>$nodes* the nodes to process</xqdoc:param>
        <xqdoc:param>$model a sequence of items which will be passed to all called template functions. Use this to pass
 information between templating instructions.</xqdoc:param>
        <xqdoc:return>item()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:resolve</xqdoc:name>
      <xqdoc:signature>templates:resolve($uri as xs:string) as xs:string?</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:param>$uri </xqdoc:param>
        <xqdoc:return>xs:string?</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:surround</xqdoc:name>
      <xqdoc:signature>templates:surround($node as node(), $model as map(*), $with as xs:string, $at as xs:string?, $using as xs:string?, $options as xs:string?) as item()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:param>$node </xqdoc:param>
        <xqdoc:param>$model </xqdoc:param>
        <xqdoc:param>$with </xqdoc:param>
        <xqdoc:param>$at? </xqdoc:param>
        <xqdoc:param>$using? </xqdoc:param>
        <xqdoc:param>$options? </xqdoc:param>
        <xqdoc:return>item()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
    <xqdoc:function>
      <xqdoc:name>templates:unless-model-key-equals</xqdoc:name>
      <xqdoc:signature>templates:unless-model-key-equals($node as node(), $model as map(*), $key as xs:string, $value as xs:string) as item()*</xqdoc:signature>
      <xqdoc:comment>
        <xqdoc:description>Evaluates its enclosed block unless the model property $key is set to value $value.</xqdoc:description>
        <xqdoc:param>$node </xqdoc:param>
        <xqdoc:param>$model </xqdoc:param>
        <xqdoc:param>$key </xqdoc:param>
        <xqdoc:param>$value </xqdoc:param>
        <xqdoc:return>item()*</xqdoc:return>
      </xqdoc:comment>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>