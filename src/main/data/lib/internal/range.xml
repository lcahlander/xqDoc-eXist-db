<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
    <xqdoc:control>
        <xqdoc:date>2019-05-14T12:08:24.519-04:00</xqdoc:date>
        <xqdoc:location>java:org.exist.xquery.modules.range.RangeIndexModule</xqdoc:location>
    </xqdoc:control>
    <xqdoc:module type="library">
        <xqdoc:uri>http://exist-db.org/xquery/range</xqdoc:uri>
        <xqdoc:name>range</xqdoc:name>
        <xqdoc:comment>
            <xqdoc:description>Functions to access the range index.</xqdoc:description>
        </xqdoc:comment>
    </xqdoc:module>
    <xqdoc:functions>
        <xqdoc:function>
            <xqdoc:name>range:eq</xqdoc:name>
            <xqdoc:signature>range:eq($nodes as node()*, $key as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Search for nodes matching the given keys in the range index. Normally this function will be called by the query optimizer.</xqdoc:description>
                <xqdoc:param>$nodes* The node set to search using a range index which is defined on those nodes</xqdoc:param>
                <xqdoc:param>$key* The key to look up.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the input node set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:gt</xqdoc:name>
            <xqdoc:signature>range:gt($nodes as node()*, $key as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Search for nodes matching the given keys in the range index. Normally this function will be called by the query optimizer.</xqdoc:description>
                <xqdoc:param>$nodes* The node set to search using a range index which is defined on those nodes</xqdoc:param>
                <xqdoc:param>$key* The key to look up.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the input node set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:lt</xqdoc:name>
            <xqdoc:signature>range:lt($nodes as node()*, $key as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Search for nodes matching the given keys in the range index. Normally this function will be called by the query optimizer.</xqdoc:description>
                <xqdoc:param>$nodes* The node set to search using a range index which is defined on those nodes</xqdoc:param>
                <xqdoc:param>$key* The key to look up.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the input node set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:le</xqdoc:name>
            <xqdoc:signature>range:le($nodes as node()*, $key as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Search for nodes matching the given keys in the range index. Normally this function will be called by the query optimizer.</xqdoc:description>
                <xqdoc:param>$nodes* The node set to search using a range index which is defined on those nodes</xqdoc:param>
                <xqdoc:param>$key* The key to look up.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the input node set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:ge</xqdoc:name>
            <xqdoc:signature>range:ge($nodes as node()*, $key as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Search for nodes matching the given keys in the range index. Normally this function will be called by the query optimizer.</xqdoc:description>
                <xqdoc:param>$nodes* The node set to search using a range index which is defined on those nodes</xqdoc:param>
                <xqdoc:param>$key* The key to look up.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the input node set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:ne</xqdoc:name>
            <xqdoc:signature>range:ne($nodes as node()*, $key as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Search for nodes matching the given keys in the range index. Normally this function will be called by the query optimizer.</xqdoc:description>
                <xqdoc:param>$nodes* The node set to search using a range index which is defined on those nodes</xqdoc:param>
                <xqdoc:param>$key* The key to look up.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the input node set whose node value is not equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:starts-with</xqdoc:name>
            <xqdoc:signature>range:starts-with($nodes as node()*, $key as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Search for nodes matching the given keys in the range index. Normally this function will be called by the query optimizer.</xqdoc:description>
                <xqdoc:param>$nodes* The node set to search using a range index which is defined on those nodes</xqdoc:param>
                <xqdoc:param>$key* The key to look up.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the input node set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:ends-with</xqdoc:name>
            <xqdoc:signature>range:ends-with($nodes as node()*, $key as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Search for nodes matching the given keys in the range index. Normally this function will be called by the query optimizer.</xqdoc:description>
                <xqdoc:param>$nodes* The node set to search using a range index which is defined on those nodes</xqdoc:param>
                <xqdoc:param>$key* The key to look up.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the input node set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:contains</xqdoc:name>
            <xqdoc:signature>range:contains($nodes as node()*, $key as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Search for nodes matching the given keys in the range index. Normally this function will be called by the query optimizer.</xqdoc:description>
                <xqdoc:param>$nodes* The node set to search using a range index which is defined on those nodes</xqdoc:param>
                <xqdoc:param>$key* The key to look up.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the input node set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:matches</xqdoc:name>
            <xqdoc:signature>range:matches($nodes as node()*, $regex as xs:string*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Search for nodes matching the given keys in the range index. Normally this function will be called by the query optimizer.</xqdoc:description>
                <xqdoc:param>$nodes* The node set to search using a range index which is defined on those nodes</xqdoc:param>
                <xqdoc:param>$regex* The regular expression.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the input node set whose node value matches the regular expression. Regular expression syntax is limited to what Lucene supports. See http://lucene.apache.org/core/4_5_1/core/org/apache/lucene/util/automaton/RegExp.html</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:field</xqdoc:name>
            <xqdoc:signature>range:field($fields as xs:string+, $operators as xs:string+, $keys as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>General field lookup function. Normally this will be used by the query optimizer.</xqdoc:description>
                <xqdoc:param>$fields+ The name of the field(s) to search</xqdoc:param>
                <xqdoc:param>$operators+ The operators to use as strings: eq, lt, gt, contains ...</xqdoc:param>
                <xqdoc:param>$keys* The keys to look up for each field.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the field set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:field-eq</xqdoc:name>
            <xqdoc:signature>range:field-eq($fields as xs:string+, $keys as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>General field lookup function based on equality comparison. Normally this will be used by the query optimizer.</xqdoc:description>
                <xqdoc:param>$fields+ The name of the field(s) to search</xqdoc:param>
                <xqdoc:param>$keys* The keys to look up for each field.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the field set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:field-ne</xqdoc:name>
            <xqdoc:signature>range:field-ne($fields as xs:string+, $keys as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>General field lookup function based on non-equality comparison. Normally this will be used by the query optimizer.</xqdoc:description>
                <xqdoc:param>$fields+ The name of the field(s) to search</xqdoc:param>
                <xqdoc:param>$keys* The keys to look up for each field.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the field set whose node value is not equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:field-gt</xqdoc:name>
            <xqdoc:signature>range:field-gt($fields as xs:string+, $keys as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>General field lookup function based on greater-than comparison. Normally this will be used by the query optimizer.</xqdoc:description>
                <xqdoc:param>$fields+ The name of the field(s) to search</xqdoc:param>
                <xqdoc:param>$keys* The keys to look up for each field.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the field set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:field-lt</xqdoc:name>
            <xqdoc:signature>range:field-lt($fields as xs:string+, $keys as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>General field lookup function based on less-than comparison. Normally this will be used by the query optimizer.</xqdoc:description>
                <xqdoc:param>$fields+ The name of the field(s) to search</xqdoc:param>
                <xqdoc:param>$keys* The keys to look up for each field.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the field set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:field-le</xqdoc:name>
            <xqdoc:signature>range:field-le($fields as xs:string+, $keys as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>General field lookup function based on less-than-equal comparison. Normally this will be used by the query optimizer.</xqdoc:description>
                <xqdoc:param>$fields+ The name of the field(s) to search</xqdoc:param>
                <xqdoc:param>$keys* The keys to look up for each field.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the field set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:field-ge</xqdoc:name>
            <xqdoc:signature>range:field-ge($fields as xs:string+, $keys as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>General field lookup function based on greater-than-equal comparison. Normally this will be used by the query optimizer.</xqdoc:description>
                <xqdoc:param>$fields+ The name of the field(s) to search</xqdoc:param>
                <xqdoc:param>$keys* The keys to look up for each field.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the field set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:field-starts-with</xqdoc:name>
            <xqdoc:signature>range:field-starts-with($fields as xs:string+, $keys as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Used by optimizer to optimize a starts-with() function call</xqdoc:description>
                <xqdoc:param>$fields+ The name of the field(s) to search</xqdoc:param>
                <xqdoc:param>$keys* The keys to look up for each field.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the field set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:field-ends-with</xqdoc:name>
            <xqdoc:signature>range:field-ends-with($fields as xs:string+, $keys as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Used by optimizer to optimize a ends-with() function call</xqdoc:description>
                <xqdoc:param>$fields+ The name of the field(s) to search</xqdoc:param>
                <xqdoc:param>$keys* The keys to look up for each field.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the field set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:field-contains</xqdoc:name>
            <xqdoc:signature>range:field-contains($fields as xs:string+, $keys as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Used by optimizer to optimize a contains() function call</xqdoc:description>
                <xqdoc:param>$fields+ The name of the field(s) to search</xqdoc:param>
                <xqdoc:param>$keys* The keys to look up for each field.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the field set whose node value is equal to the key.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:field-matches</xqdoc:name>
            <xqdoc:signature>range:field-matches($fields as xs:string+, $keys as xs:anyAtomicType*) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Used by optimizer to optimize a matches() function call</xqdoc:description>
                <xqdoc:param>$fields+ The name of the field(s) to search</xqdoc:param>
                <xqdoc:param>$keys* The keys to look up for each field.</xqdoc:param>
                <xqdoc:return>node()* : all nodes from the field set whose node value matches the regular expression.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:optimize</xqdoc:name>
            <xqdoc:signature>range:optimize() as empty-sequence()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Calls Lucene's optimize method to merge all index segments into a single one. This is a costly operation and should not be used except for data sets which can be expected to remain unchanged for a while. The optimize will block the index for other write operations and may take some time. You need to be a user in group dba to call this function.</xqdoc:description>
                <xqdoc:return>empty-sequence() : </xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:index-keys-for-field</xqdoc:name>
            <xqdoc:signature>range:index-keys-for-field($field as xs:string, $function-reference as function(*), $max-number-returned as xs:int?) as item()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Retrieve all index keys contained in a range index which has been defined with a field name. Similar toutil:index-keys, but works with fields.</xqdoc:description>
                <xqdoc:param>$field The field to use</xqdoc:param>
                <xqdoc:param>$function-reference The function reference as created by the util:function function. It can be an arbitrary user-defined function, but it should take exactly 2 arguments: 1) the current index key as found in the range index as an atomic value, 2) a sequence containing three int values: a) the overall frequency of the key within the node set, b) the number of distinct documents in the node set the key occurs in, c) the current position of the key in the whole list of keys returned.</xqdoc:param>
                <xqdoc:param>$max-number-returned? The maximum number of returned keys</xqdoc:param>
                <xqdoc:return>item()* : the results of the eval of the $function-reference</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>range:index-keys-for-field</xqdoc:name>
            <xqdoc:signature>range:index-keys-for-field($field as xs:string, $start-value as xs:anyAtomicType?, $function-reference as function(*), $max-number-returned as xs:int?) as item()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Retrieve all index keys contained in a range index which has been defined with a field name. Similar toutil:index-keys, but works with fields.</xqdoc:description>
                <xqdoc:param>$field The field to use</xqdoc:param>
                <xqdoc:param>$start-value? Only index keys of the same type but being greater than $start-value will be reported for non-string types. For string types, only keys starting with the given prefix are reported.</xqdoc:param>
                <xqdoc:param>$function-reference The function reference as created by the util:function function. It can be an arbitrary user-defined function, but it should take exactly 2 arguments: 1) the current index key as found in the range index as an atomic value, 2) a sequence containing three int values: a) the overall frequency of the key within the node set, b) the number of distinct documents in the node set the key occurs in, c) the current position of the key in the whole list of keys returned.</xqdoc:param>
                <xqdoc:param>$max-number-returned? The maximum number of returned keys</xqdoc:param>
                <xqdoc:return>item()* : the results of the eval of the $function-reference</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
    </xqdoc:functions>
</xqdoc:xqdoc>