<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
	<xqdoc:control>
		<xqdoc:date>2019-05-14T12:08:24.519-04:00</xqdoc:date>
		<xqdoc:location>java:org.exist.xquery.functions.util.UtilModule</xqdoc:location>
	</xqdoc:control>
	<xqdoc:module type="library">
		<xqdoc:uri>http://exist-db.org/xquery/util</xqdoc:uri>
		<xqdoc:name>util</xqdoc:name>
		<xqdoc:comment>
			<xqdoc:description>A module for various utility extension functions.</xqdoc:description>
		</xqdoc:comment>
	</xqdoc:module>
	<xqdoc:functions>
		<xqdoc:function>
			<xqdoc:name>util:absolute-resource-id</xqdoc:name>
			<xqdoc:signature>util:absolute-resource-id($node-or-path as item()) as xs:integer?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the absolute internal id of a resource as a 65 bit number. The first 32 bits are the collection id, the next 32 bits are the document id, the last bit is the document type. The argument can either be a node or a string path pointing to a resource in the database. If the resource does not exist or the node does not belong to a stored document, the empty sequence is returned.</xqdoc:description>
				<xqdoc:param>$node-or-path The node or a string path pointing to a resource in the database.</xqdoc:param>
				<xqdoc:return>xs:integer? : the absolute ID of the resource</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:base-to-integer</xqdoc:name>
			<xqdoc:signature>util:base-to-integer($number as item(), $base as xs:integer) as xs:integer</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Converts the number $number from base $base to xs:integer.</xqdoc:description>
				<xqdoc:param>$number The number to convert</xqdoc:param>
				<xqdoc:param>$base The base of $number</xqdoc:param>
				<xqdoc:return>xs:integer : the xs:integer representation of $number in base $base</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:base64-decode</xqdoc:name>
			<xqdoc:signature>util:base64-decode($string as xs:string?) as xs:string?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Decode the given Base64 encoded string back to clear text</xqdoc:description>
				<xqdoc:param>$string? The Base64 string to be decoded</xqdoc:param>
				<xqdoc:return>xs:string? : the decoded output</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:base64-encode</xqdoc:name>
			<xqdoc:signature>util:base64-encode($string as xs:string?) as xs:string?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Encodes the given string as Base64</xqdoc:description>
				<xqdoc:param>$string? The string to be Base64 encoded</xqdoc:param>
				<xqdoc:return>xs:string? : the Base64 encoded output, with trailing newlines trimmed</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:base64-encode</xqdoc:name>
			<xqdoc:signature>util:base64-encode($string as xs:string?, $trim as xs:boolean) as xs:string?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Encodes the given string as Base64</xqdoc:description>
				<xqdoc:param>$string? The string to be Base64 encoded</xqdoc:param>
				<xqdoc:param>$trim Trim trailing newlines?</xqdoc:param>
				<xqdoc:return>xs:string? : the Base64 encoded output</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>binary-doc</xqdoc:name>
			<xqdoc:signature>binary-doc($binary-resource as xs:string?) as xs:base64Binary?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Retrieves the binary resource and returns its contents as a value of type xs:base64Binary. An empty sequence is returned if the resource could not be found or $binary-resource was empty.</xqdoc:description>
				<xqdoc:param>$binary-resource? The path to the binary resource</xqdoc:param>
				<xqdoc:return>xs:base64Binary? : the binary document</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>binary-doc-available</xqdoc:name>
			<xqdoc:signature>binary-doc-available($binary-resource as xs:string?) as xs:boolean</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Checks if the binary resource identified by $binary-resource is available.</xqdoc:description>
				<xqdoc:param>$binary-resource? The path to the binary resource</xqdoc:param>
				<xqdoc:return>xs:boolean : true if the binary document is available</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>binary-doc-content-digest</xqdoc:name>
			<xqdoc:signature>binary-doc-content-digest($binary-resource as xs:string?, $algorithm as xs:string) as xs:hexBinary?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Gets the digest of the content of the resource identified by $binary-resource.</xqdoc:description>
				<xqdoc:param>$binary-resource? The path to the binary resource</xqdoc:param>
				<xqdoc:param>$algorithm The name of the algorithm to use for calculating the digest. Supports: MD2, MD4, MD5, SHA-1, SHA-256, SHA-512, RIPEMD-160, RIPEMD-256, BLAKE2B-160, BLAKE2B-256, BLAKE2B-512</xqdoc:param>
				<xqdoc:return>xs:hexBinary? : the digest of the content of the Binary Resource</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:binary-to-string</xqdoc:name>
			<xqdoc:signature>util:binary-to-string($binary-resource as xs:base64Binary?) as xs:string?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the contents of a binary resource as an xs:string value. The binary data is transformed into a Java string using the encoding specified in the optional second argument or the default of UTF-8.</xqdoc:description>
				<xqdoc:param>$binary-resource? The binary resource</xqdoc:param>
				<xqdoc:return>xs:string? : the string containing the encoded binary resource</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:binary-to-string</xqdoc:name>
			<xqdoc:signature>util:binary-to-string($binary-resource as xs:base64Binary?, $encoding as xs:string) as xs:string?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the contents of a binary resource as an xs:string value. The binary data is transformed into a Java string using the encoding specified in the optional second argument or the default of UTF-8.</xqdoc:description>
				<xqdoc:param>$binary-resource? The binary resource</xqdoc:param>
				<xqdoc:param>$encoding The encoding type.  i.e. 'UTF-8'</xqdoc:param>
				<xqdoc:return>xs:string? : the string containing the encoded binary resource</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:call</xqdoc:name>
			<xqdoc:signature>util:call($function-reference as function(*), $parameters as item()*) as item()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Invokes a first-class function reference created by util:function. The function to be called is passed as the first argument. All remaining arguments are forwarded to the called function.</xqdoc:description>
				<xqdoc:param>$function-reference The function to ba called</xqdoc:param>
				<xqdoc:param>$parameters* The parameters to be passed into the function</xqdoc:param>
				<xqdoc:return>item()* : the results from the function called</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:collations</xqdoc:name>
			<xqdoc:signature>util:collations() as xs:string*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns a sequence of strings containing all collation locales that might be specified in the '?lang=' parameter of a collation URI.</xqdoc:description>
				<xqdoc:return>xs:string* : the sequence of strings containing all collation locales that might be specified in the '?lang=' parameter of a collation URI.</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:collection-name</xqdoc:name>
			<xqdoc:signature>util:collection-name($node-or-path-string as item()?) as xs:string?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the name of the collection from a passed node or path string. If the argument is a node, the function returns the name of the collection to which the node's document belongs. If the argument is a string, it is interpreted as path to a resource and the function returns the computed parent collection path for this resource.</xqdoc:description>
				<xqdoc:param>$node-or-path-string? The document node or a path string.</xqdoc:param>
				<xqdoc:return>xs:string? : the name of the collection.</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:compile</xqdoc:name>
			<xqdoc:signature>util:compile($expression as xs:string) as xs:string</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Compiles the XQuery expression given in parameter $expression. Returns an empty string if no errors were found, a description of the error otherwise.</xqdoc:description>
				<xqdoc:param>$expression The XPath/XQuery expression.</xqdoc:param>
				<xqdoc:return>xs:string : the results of the expression</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:compile</xqdoc:name>
			<xqdoc:signature>util:compile($expression as xs:string, $module-load-path as xs:string) as xs:string</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Compiles the XQuery expression given in parameter $expression. Returns an empty string if no errors were found, a description of the error otherwise.</xqdoc:description>
				<xqdoc:param>$expression The XPath/XQuery expression.</xqdoc:param>
				<xqdoc:param>$module-load-path The module load path. Imports will be resolved relative to this. Use xmldb:exist:///db if your modules are stored in db.</xqdoc:param>
				<xqdoc:return>xs:string : the results of the expression</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:compile-query</xqdoc:name>
			<xqdoc:signature>util:compile-query($expression as xs:string, $module-load-path as xs:string?) as element()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Compiles the XQuery expression given in parameter $expression. Returns an XML fragment which describes any errors found. If the query could be compiled successfully, a fragment &lt;info result="pass"/&gt; is returned. Otherwise, an error description is returned as follows: &lt;info result="fail"&gt;&lt;error code="errcode" line="line" column="column"&gt;error description&lt;/error&gt;&lt;/info&gt;.</xqdoc:description>
				<xqdoc:param>$expression The XPath/XQuery expression.</xqdoc:param>
				<xqdoc:param>$module-load-path? The module load path. Imports will be resolved relative to this. Use xmldb:exist:///db if your modules are stored in db.</xqdoc:param>
				<xqdoc:return>element() : the results of the expression</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:declare-namespace</xqdoc:name>
			<xqdoc:signature>util:declare-namespace($prefix as xs:string, $namespace-uri as xs:anyURI) as item()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Dynamically declares a namespace/prefix mapping for the current context.</xqdoc:description>
				<xqdoc:param>$prefix The prefix to be assigned to the namespace</xqdoc:param>
				<xqdoc:param>$namespace-uri The namespace URI</xqdoc:param>
				<xqdoc:return>item()</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:declare-option</xqdoc:name>
			<xqdoc:signature>util:declare-option($name as xs:string, $option as xs:string) as item()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Dynamically declares a serialization option as with 'declare option'.</xqdoc:description>
				<xqdoc:param>$name The serialization option name</xqdoc:param>
				<xqdoc:param>$option The serialization option value</xqdoc:param>
				<xqdoc:return>item()</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:declared-variables</xqdoc:name>
			<xqdoc:signature>util:declared-variables($namespace-uri as xs:string) as xs:string+</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns a sequence containing the QNames of all functions declared in the module identified by the specified namespace URI. An error is raised if no module is found for the specified URI.</xqdoc:description>
				<xqdoc:param>$namespace-uri The namespace URI of the function module</xqdoc:param>
				<xqdoc:return>xs:string+ : the sequence of function names</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:deep-copy</xqdoc:name>
			<xqdoc:signature>util:deep-copy($item as item()?) as item()?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Creates a new, entirely in-memory copy of the passed in item.</xqdoc:description>
				<xqdoc:param>$item? The item to be copied</xqdoc:param>
				<xqdoc:return>item()? : The copied item</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:describe-function</xqdoc:name>
			<xqdoc:signature>util:describe-function($function-name as xs:QName) as node()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Describes a built-in function. Returns an element describing the function signature.</xqdoc:description>
				<xqdoc:param>$function-name The name of the function to get the signature of</xqdoc:param>
				<xqdoc:return>node() : the signature of the function</xqdoc:return>
				<xqdoc:deprecated>Moved to the module: http://exist-db.org/xquery/inspection, you should now use 'inspect:inspect-function' instead!
This function could be removed in the next major release version.</xqdoc:deprecated>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:disable-profiling</xqdoc:name>
			<xqdoc:signature>util:disable-profiling() as item()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Disable profiling output within the query.</xqdoc:description>
				<xqdoc:return>item()</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:doctype</xqdoc:name>
			<xqdoc:signature>util:doctype($doctype as xs:string+) as node()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the document nodes of the documents with the given DOCTYPE(s).</xqdoc:description>
				<xqdoc:param>$doctype+ The DOCTYPE of the documents to find</xqdoc:param>
				<xqdoc:return>node()* : the document nodes</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:document-id</xqdoc:name>
			<xqdoc:signature>util:document-id($node-or-path as item()) as xs:int?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the internal integer id of a document. The argument can either be a node or a string path pointing to a resource in the database. If the resource does not exist or the node does not belong to a stored document, the empty sequence is returned.</xqdoc:description>
				<xqdoc:param>$node-or-path The node or a string path pointing to a resource in the database.</xqdoc:param>
				<xqdoc:return>xs:int? : the ID of the document</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:document-name</xqdoc:name>
			<xqdoc:signature>util:document-name($node-or-path as item()) as xs:string?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the name of a document (excluding the collection path). The argument can either be a node or a string path pointing to a resource in the database. If the resource does not exist or the node does not belong to a stored document, the empty sequence is returned.</xqdoc:description>
				<xqdoc:param>$node-or-path The node or a string path pointing to a resource in the database.</xqdoc:param>
				<xqdoc:return>xs:string? : the name of the document</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:enable-profiling</xqdoc:name>
			<xqdoc:signature>util:enable-profiling($verbosity as xs:int) as item()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Enable profiling output within the query. The profiling starts with this function call and will end with a call to 'disable-profiling'. Argument $verbosity specifies the verbosity. All other profiling options can be configured via the 'declare option exist:profiling ...' in the query prolog.</xqdoc:description>
				<xqdoc:param>$verbosity The verbosity of the profiling</xqdoc:param>
				<xqdoc:return>item()</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>eval</xqdoc:name>
			<xqdoc:signature>eval($expression as item()) as node()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Dynamically evaluates an XPath/XQuery expression.</xqdoc:description>
				<xqdoc:param>$expression The expression to be evaluated.  If it is of type xs:string, the function tries to execute this string as the query. If the first argument is of type xs:anyURI, the function will try to load the query from the resource to which the URI resolves. If the URI has no scheme, it is assumed that the query is stored in the db and the URI is interpreted as a database path. This is the same as calling util:eval(xs:anyURI('xmldb:exist:///db/test/test.xq')). The query inherits the current execution context, i.e. all namespace declarations and variable declarations are visible from within the inner expression. The function returns an empty sequence if a whitespace string is passed.</xqdoc:param>
				<xqdoc:return>node()* : the results of the evaluated XPath/XQuery expression</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>eval</xqdoc:name>
			<xqdoc:signature>eval($expression as item(), $cache-flag as xs:boolean) as node()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Dynamically evaluates an XPath/XQuery expression.</xqdoc:description>
				<xqdoc:param>$expression The expression to be evaluated.  If it is of type xs:string, the function tries to execute this string as the query. If the first argument is of type xs:anyURI, the function will try to load the query from the resource to which the URI resolves. If the URI has no scheme, it is assumed that the query is stored in the db and the URI is interpreted as a database path. This is the same as calling util:eval(xs:anyURI('xmldb:exist:///db/test/test.xq')). The query inherits the current execution context, i.e. all namespace declarations and variable declarations are visible from within the inner expression. The function returns an empty sequence if a whitespace string is passed.</xqdoc:param>
				<xqdoc:param>$cache-flag The flag for whether the compiled query should be cached. The cached querywill be globally available within the db instance.</xqdoc:param>
				<xqdoc:return>node()* : the results of the evaluated XPath/XQuery expression</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>eval</xqdoc:name>
			<xqdoc:signature>eval($expression as item(), $cache-flag as xs:boolean, $external-variable as xs:anyType*) as node()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Dynamically evaluates an XPath/XQuery expression.</xqdoc:description>
				<xqdoc:param>$expression The expression to be evaluated.  If it is of type xs:string, the function tries to execute this string as the query. If the first argument is of type xs:anyURI, the function will try to load the query from the resource to which the URI resolves. If the URI has no scheme, it is assumed that the query is stored in the db and the URI is interpreted as a database path. This is the same as calling util:eval(xs:anyURI('xmldb:exist:///db/test/test.xq')). The query inherits the current execution context, i.e. all namespace declarations and variable declarations are visible from within the inner expression. The function returns an empty sequence if a whitespace string is passed.</xqdoc:param>
				<xqdoc:param>$cache-flag The flag for whether the compiled query should be cached. The cached querywill be globally available within the db instance.</xqdoc:param>
				<xqdoc:param>$external-variable* External variables to be bound for the query that is being evaluated. Should be alternating variable QName and value.</xqdoc:param>
				<xqdoc:return>node()* : the results of the evaluated XPath/XQuery expression</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>eval-and-serialize</xqdoc:name>
			<xqdoc:signature>eval-and-serialize($expression as item(), $default-serialization-params as item()?) as item()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Dynamically evaluates an XPath/XQuery expression and serializes the results</xqdoc:description>
				<xqdoc:param>$expression The expression to be evaluated.  If it is of type xs:string, the function tries to execute this string as the query. If the first argument is of type xs:anyURI, the function will try to load the query from the resource to which the URI resolves. If the URI has no scheme, it is assumed that the query is stored in the db and the URI is interpreted as a database path. This is the same as calling util:eval(xs:anyURI('xmldb:exist:///db/test/test.xq')). The query inherits the current execution context, i.e. all namespace declarations and variable declarations are visible from within the inner expression. The function returns an empty sequence if a whitespace string is passed.</xqdoc:param>
				<xqdoc:param>$default-serialization-params? The default parameters for serialization, these maybe overridden by any settings within the XQuery Prolog of the $expression.</xqdoc:param>
				<xqdoc:return>item()* : the results of the evaluated XPath/XQuery expression</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>eval-and-serialize</xqdoc:name>
			<xqdoc:signature>eval-and-serialize($expression as item(), $default-serialization-params as item()?, $starting-loc as xs:double) as item()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Dynamically evaluates an XPath/XQuery expression and serializes the results</xqdoc:description>
				<xqdoc:param>$expression The expression to be evaluated.  If it is of type xs:string, the function tries to execute this string as the query. If the first argument is of type xs:anyURI, the function will try to load the query from the resource to which the URI resolves. If the URI has no scheme, it is assumed that the query is stored in the db and the URI is interpreted as a database path. This is the same as calling util:eval(xs:anyURI('xmldb:exist:///db/test/test.xq')). The query inherits the current execution context, i.e. all namespace declarations and variable declarations are visible from within the inner expression. The function returns an empty sequence if a whitespace string is passed.</xqdoc:param>
				<xqdoc:param>$default-serialization-params? The default parameters for serialization, these maybe overridden by any settings within the XQuery Prolog of the $expression.</xqdoc:param>
				<xqdoc:param>$starting-loc the starting location within the results to return the values from</xqdoc:param>
				<xqdoc:return>item()* : the results of the evaluated XPath/XQuery expression</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>eval-and-serialize</xqdoc:name>
			<xqdoc:signature>eval-and-serialize($expression as item(), $default-serialization-params as item()?, $starting-loc as xs:double, $length as xs:double) as item()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Dynamically evaluates an XPath/XQuery expression and serializes the results</xqdoc:description>
				<xqdoc:param>$expression The expression to be evaluated.  If it is of type xs:string, the function tries to execute this string as the query. If the first argument is of type xs:anyURI, the function will try to load the query from the resource to which the URI resolves. If the URI has no scheme, it is assumed that the query is stored in the db and the URI is interpreted as a database path. This is the same as calling util:eval(xs:anyURI('xmldb:exist:///db/test/test.xq')). The query inherits the current execution context, i.e. all namespace declarations and variable declarations are visible from within the inner expression. The function returns an empty sequence if a whitespace string is passed.</xqdoc:param>
				<xqdoc:param>$default-serialization-params? The default parameters for serialization, these maybe overridden by any settings within the XQuery Prolog of the $expression.</xqdoc:param>
				<xqdoc:param>$starting-loc the starting location within the results to return the values from</xqdoc:param>
				<xqdoc:param>$length the number of items from $starting-loc to return the values of</xqdoc:param>
				<xqdoc:return>item()* : the results of the evaluated XPath/XQuery expression</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>eval-inline</xqdoc:name>
			<xqdoc:signature>eval-inline($inline-context as item()?, $expression as item()) as item()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Dynamically evaluates an XPath/XQuery expression.</xqdoc:description>
				<xqdoc:param>$inline-context? The inline context</xqdoc:param>
				<xqdoc:param>$expression The expression to be evaluated.  If it is of type xs:string, the function tries to execute this string as the query. If the first argument is of type xs:anyURI, the function will try to load the query from the resource to which the URI resolves. If the URI has no scheme, it is assumed that the query is stored in the db and the URI is interpreted as a database path. This is the same as calling util:eval(xs:anyURI('xmldb:exist:///db/test/test.xq')). The query inherits the current execution context, i.e. all namespace declarations and variable declarations are visible from within the inner expression. The function returns an empty sequence if a whitespace string is passed.</xqdoc:param>
				<xqdoc:return>item()* : the results of the evaluated XPath/XQuery expression</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>eval-inline</xqdoc:name>
			<xqdoc:signature>eval-inline($inline-context as item()?, $expression as item(), $cache-flag as xs:boolean) as item()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Dynamically evaluates an XPath/XQuery expression.</xqdoc:description>
				<xqdoc:param>$inline-context? The inline context</xqdoc:param>
				<xqdoc:param>$expression The expression to be evaluated.  If it is of type xs:string, the function tries to execute this string as the query. If the first argument is of type xs:anyURI, the function will try to load the query from the resource to which the URI resolves. If the URI has no scheme, it is assumed that the query is stored in the db and the URI is interpreted as a database path. This is the same as calling util:eval(xs:anyURI('xmldb:exist:///db/test/test.xq')). The query inherits the current execution context, i.e. all namespace declarations and variable declarations are visible from within the inner expression. The function returns an empty sequence if a whitespace string is passed.</xqdoc:param>
				<xqdoc:param>$cache-flag The flag for whether the compiled query should be cached. The cached querywill be globally available within the db instance.</xqdoc:param>
				<xqdoc:return>item()* : the results of the evaluated XPath/XQuery expression</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>eval-with-context</xqdoc:name>
			<xqdoc:signature>eval-with-context($expression as item(), $context as node()?, $cache-flag as xs:boolean) as node()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Dynamically evaluates an XPath/XQuery expression.</xqdoc:description>
				<xqdoc:param>$expression The expression to be evaluated.  If it is of type xs:string, the function tries to execute this string as the query. If the first argument is of type xs:anyURI, the function will try to load the query from the resource to which the URI resolves. If the URI has no scheme, it is assumed that the query is stored in the db and the URI is interpreted as a database path. This is the same as calling util:eval(xs:anyURI('xmldb:exist:///db/test/test.xq')). The query inherits the current execution context, i.e. all namespace declarations and variable declarations are visible from within the inner expression. The function returns an empty sequence if a whitespace string is passed.</xqdoc:param>
				<xqdoc:param>$context? The query inherits the context described by the XML fragment in this parameter. It should have the format:
&lt;static-context&gt;
	&lt;output-size-limit value="-1"/&gt;
	&lt;unbind-namespace uri="http://exist.sourceforge.net/NS/exist"/&gt;
	&lt;current-dateTime value="dateTime"/&gt;
	&lt;implicit-timezone value="duration"/&gt;
	&lt;variable name="qname"&gt;variable value&lt;/variable&gt;
	&lt;default-context&gt;explicitly provide default context here&lt;/default-context&gt;
	&lt;mapModule namespace="uri" uri="uri_to_module"/&gt;
&lt;/static-context&gt;.
</xqdoc:param>
				<xqdoc:param>$cache-flag The flag for whether the compiled query should be cached. The cached querywill be globally available within the db instance.</xqdoc:param>
				<xqdoc:return>node()* : the results of the evaluated XPath/XQuery expression</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>eval-with-context</xqdoc:name>
			<xqdoc:signature>eval-with-context($expression as item(), $context as node()?, $cache-flag as xs:boolean, $eval-context-item as item()?) as node()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Dynamically evaluates an XPath/XQuery expression.</xqdoc:description>
				<xqdoc:param>$expression The expression to be evaluated.  If it is of type xs:string, the function tries to execute this string as the query. If the first argument is of type xs:anyURI, the function will try to load the query from the resource to which the URI resolves. If the URI has no scheme, it is assumed that the query is stored in the db and the URI is interpreted as a database path. This is the same as calling util:eval(xs:anyURI('xmldb:exist:///db/test/test.xq')). The query inherits the current execution context, i.e. all namespace declarations and variable declarations are visible from within the inner expression. The function returns an empty sequence if a whitespace string is passed.</xqdoc:param>
				<xqdoc:param>$context? The query inherits the context described by the XML fragment in this parameter. It should have the format:
&lt;static-context&gt;
	&lt;output-size-limit value="-1"/&gt;
	&lt;unbind-namespace uri="http://exist.sourceforge.net/NS/exist"/&gt;
	&lt;current-dateTime value="dateTime"/&gt;
	&lt;implicit-timezone value="duration"/&gt;
	&lt;variable name="qname"&gt;variable value&lt;/variable&gt;
	&lt;default-context&gt;explicitly provide default context here&lt;/default-context&gt;
	&lt;mapModule namespace="uri" uri="uri_to_module"/&gt;
&lt;/static-context&gt;.
</xqdoc:param>
				<xqdoc:param>$cache-flag The flag for whether the compiled query should be cached. The cached querywill be globally available within the db instance.</xqdoc:param>
				<xqdoc:param>$eval-context-item? the context item against which the expression will be evaluated</xqdoc:param>
				<xqdoc:return>node()* : the results of the evaluated XPath/XQuery expression</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:exclusive-lock</xqdoc:name>
			<xqdoc:signature>util:exclusive-lock($nodes as node()*, $expression as item()*) as item()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Puts an exclusive lock on the owner documents of all nodes in the first argument $nodes. Then evaluates the expressions in the second argument $expression and releases the acquired locks after their completion.</xqdoc:description>
				<xqdoc:param>$nodes* The nodes whose owning documents will have exclusive locks set.</xqdoc:param>
				<xqdoc:param>$expression* The expression(s) that are to be evaluated before the acquired locks are released.</xqdoc:param>
				<xqdoc:return>item()* : the results of the evaluated expression(s)</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:expand</xqdoc:name>
			<xqdoc:signature>util:expand($node as node()*) as node()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Creates an in-memory copy of the passed node set, using the specified serialization options. By default, full-text match terms will be tagged with &amp;lt;exist:match&amp;gt; and XIncludes will be expanded.</xqdoc:description>
				<xqdoc:param>$node* The node(s) to create in-memory copies of.</xqdoc:param>
				<xqdoc:return>node()* : the results</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:expand</xqdoc:name>
			<xqdoc:signature>util:expand($node as node()*, $serialization-parameters as xs:string) as node()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Creates an in-memory copy of the passed node set, using the specified serialization options. By default, full-text match terms will be tagged with &amp;lt;exist:match&amp;gt; and XIncludes will be expanded. Serialization parameters can be set in the second argument, which accepts the same parameters as the exist:serialize option.</xqdoc:description>
				<xqdoc:param>$node* The node(s) to create in-memory copies of.</xqdoc:param>
				<xqdoc:param>$serialization-parameters The serialization parameters</xqdoc:param>
				<xqdoc:return>node()* : the results</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:function</xqdoc:name>
			<xqdoc:signature>util:function($name as xs:QName, $arity as xs:integer) as function(*)</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Creates a reference to an XQuery function which can later be called from util:call. This allows for higher-order functions to be implemented in XQuery. A higher-order function is a function that takes another function as argument. The first argument represents the name of the function, which should bea valid QName. The second argument is the arity (number of parameters) of the function. If no function can be found that matches the name and arity, an error is thrown. Please note: the arguments to this function have to be literals or need to be resolvable at compile time at least.</xqdoc:description>
				<xqdoc:param>$name The name of the function</xqdoc:param>
				<xqdoc:param>$arity The arity of the function</xqdoc:param>
				<xqdoc:return>function(*) : the reference to the XQuery function</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:get-fragment-between</xqdoc:name>
			<xqdoc:signature>util:get-fragment-between($beginning-node as node(), $ending-node as node()?, $make-fragment as xs:boolean?, $display-root-namespace as xs:boolean?) as xs:string</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns an xml fragment or a sequence of nodes between two elements (normally milestone elements). This function works only on documents which are stored in eXist DB.The $beginning-node represents the first node/milestone element, $ending-node, the second one. The third argument, $make-fragment, is a boolean value for the path completion. If it is set to true() the result sequence is wrapped into a parent element node. The fourth argument, display-root-namespace, is a boolean value for displaying the root node namespace. If it is set to true() the attribute "xmlns" in the root node of the result sequence is determined explicitely from the $beginning-node. Example call of the function for getting the fragment between two TEI page break element nodes:   let $fragment := util:get-fragment-between(//pb[1], //pb[2], true(), true())</xqdoc:description>
				<xqdoc:param>$beginning-node The first node/milestone element</xqdoc:param>
				<xqdoc:param>$ending-node? The second node/milestone element</xqdoc:param>
				<xqdoc:param>$make-fragment? The flag make a fragment.</xqdoc:param>
				<xqdoc:param>$display-root-namespace? Display the namespace of the root node of the fragment.</xqdoc:param>
				<xqdoc:return>xs:string : the string containing the fragment between the two node/milestone elements.</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:get-module-description</xqdoc:name>
			<xqdoc:signature>util:get-module-description($namespace-uri as xs:string) as xs:string</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns a short description of the module identified by the namespace URI.</xqdoc:description>
				<xqdoc:param>$namespace-uri The namespace URI of the module</xqdoc:param>
				<xqdoc:return>xs:string : the description of the active function module identified by the namespace URI</xqdoc:return>
				<xqdoc:deprecated>Moved to the module: http://exist-db.org/xquery/inspection, you should now use 'inspect:inspect-module-uri' instead!
This function could be removed in the next major release version.</xqdoc:deprecated>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:get-module-info</xqdoc:name>
			<xqdoc:signature>util:get-module-info() as element()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns an XML fragment providing additional information about the module identified by the namespace URI.</xqdoc:description>
				<xqdoc:return>element() : the description of the active function module identified by the namespace URI</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:get-module-info</xqdoc:name>
			<xqdoc:signature>util:get-module-info($namespace-uri as xs:string) as element()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns an XML fragment providing additional information about the module identified by the namespace URI.</xqdoc:description>
				<xqdoc:param>$namespace-uri The namespace URI of the module</xqdoc:param>
				<xqdoc:return>element() : the description of the active function module identified by the namespace URI</xqdoc:return>
				<xqdoc:deprecated>Moved to the module: http://exist-db.org/xquery/inspection, you should now use 'inspect:inspect-module-uri' instead!
This function could be removed in the next major release version.</xqdoc:deprecated>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:get-option</xqdoc:name>
			<xqdoc:signature>util:get-option($name as xs:string) as xs:string?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Gets the value of a serialization option as set with 'declare option'.</xqdoc:description>
				<xqdoc:param>$name The serialization option name</xqdoc:param>
				<xqdoc:return>xs:string?</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:get-resource-by-absolute-id</xqdoc:name>
			<xqdoc:signature>util:get-resource-by-absolute-id($absolute-id as xs:integer) as item()?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the resource indicated by its absolute internal id. The first 32 bits are the collection id, the next 32 bits are the document id, the last bit is the document type. If the resource does not exist, the empty sequence is returned.</xqdoc:description>
				<xqdoc:param>$absolute-id The absolute id of a resource in the database.</xqdoc:param>
				<xqdoc:return>item()? : The resource from the database. A document() if its an XML resource, or an xs:base64binary otherwise</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:get-sequence-type</xqdoc:name>
			<xqdoc:signature>util:get-sequence-type($sequence-type as xs:anyType*) as xs:string</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the string representation of the type of sequence.</xqdoc:description>
				<xqdoc:param>$sequence-type* The type of sequence</xqdoc:param>
				<xqdoc:return>xs:string : the string representation of the type of sequence</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:hash</xqdoc:name>
			<xqdoc:signature>util:hash($message as item(), $algorithm as xs:string) as xs:string</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Calculates a hashcode from a string based on a specified algorithm.</xqdoc:description>
				<xqdoc:param>$message The string to generate the hashcode from</xqdoc:param>
				<xqdoc:param>$algorithm The algorithm used to generate the hashcode</xqdoc:param>
				<xqdoc:return>xs:string : the hashcode</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:hash</xqdoc:name>
			<xqdoc:signature>util:hash($message as item(), $algorithm as xs:string, $base64flag as xs:boolean) as xs:string</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Calculates a hashcode from a string based on a specified algorithm.</xqdoc:description>
				<xqdoc:param>$message The string to generate the hashcode from</xqdoc:param>
				<xqdoc:param>$algorithm The algorithm used to generate the hashcode</xqdoc:param>
				<xqdoc:param>$base64flag The flag that specifies whether to return the result as Base64 encoded</xqdoc:param>
				<xqdoc:return>xs:string : the hashcode</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:import-module</xqdoc:name>
			<xqdoc:signature>util:import-module($module-uri as xs:anyURI, $prefix as xs:string, $location as xs:anyURI) as item()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Dynamically imports an XQuery module into the current context. The parameters have the same meaning as in an 'import module ...' expression in the query prolog.</xqdoc:description>
				<xqdoc:param>$module-uri The namespace URI of the module</xqdoc:param>
				<xqdoc:param>$prefix The prefix to be assigned to the namespace</xqdoc:param>
				<xqdoc:param>$location The location of the module</xqdoc:param>
				<xqdoc:return>item()</xqdoc:return>
				<xqdoc:deprecated>Moved to the module: http://www.w3.org/2005/xpath-functions, you should now use ':load-xquery-module' instead!
This function could be removed in the next major release version.</xqdoc:deprecated>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:index-key-documents</xqdoc:name>
			<xqdoc:signature>util:index-key-documents($nodes as node()*, $value as xs:anyAtomicType) as xs:integer?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Return the number of documents for an indexed value.</xqdoc:description>
				<xqdoc:param>$nodes* The nodes whose content is indexed</xqdoc:param>
				<xqdoc:param>$value The indexed value to search for</xqdoc:param>
				<xqdoc:return>xs:integer? : the number of documents for the indexed value</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:index-key-documents</xqdoc:name>
			<xqdoc:signature>util:index-key-documents($nodes as node()*, $value as xs:anyAtomicType, $index as xs:string) as xs:integer?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Return the number of documents for an indexed value.</xqdoc:description>
				<xqdoc:param>$nodes* The nodes whose content is indexed</xqdoc:param>
				<xqdoc:param>$value The indexed value to search for</xqdoc:param>
				<xqdoc:param>$index The index in which the search is made</xqdoc:param>
				<xqdoc:return>xs:integer? : the number of documents for the indexed value</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:index-key-occurrences</xqdoc:name>
			<xqdoc:signature>util:index-key-occurrences($nodes as node()*, $value as xs:anyAtomicType) as xs:integer?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Return the number of occurrences for an indexed value.</xqdoc:description>
				<xqdoc:param>$nodes* The nodes whose content is indexed</xqdoc:param>
				<xqdoc:param>$value The indexed value to search for</xqdoc:param>
				<xqdoc:return>xs:integer? : the number of occurrences for the indexed value</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:index-key-occurrences</xqdoc:name>
			<xqdoc:signature>util:index-key-occurrences($nodes as node()*, $value as xs:anyAtomicType, $index as xs:string) as xs:integer?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Return the number of occurrences for an indexed value.</xqdoc:description>
				<xqdoc:param>$nodes* The nodes whose content is indexed</xqdoc:param>
				<xqdoc:param>$value The indexed value to search for</xqdoc:param>
				<xqdoc:param>$index The index in which the search is made</xqdoc:param>
				<xqdoc:return>xs:integer? : the number of occurrences for the indexed value</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:index-keys</xqdoc:name>
			<xqdoc:signature>util:index-keys($node-set as node()*, $start-value as xs:anyAtomicType?, $function-reference as function(*), $max-number-returned as xs:int?) as item()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Can be used to query existing range indexes defined on a set of nodes. All index keys defined for the given node set are reported to a callback function. The function will check for indexes defined on path as well as indexes defined by QName. </xqdoc:description>
				<xqdoc:param>$node-set* The node set</xqdoc:param>
				<xqdoc:param>$start-value? Only index keys of the same type but being greater than $start-value will be reported for non-string types. For string types, only keys starting with the given prefix are reported.</xqdoc:param>
				<xqdoc:param>$function-reference The function reference as created by the util:function function. It can be an arbitrary user-defined function, but it should take exactly 2 arguments: 1) the current index key as found in the range index as an atomic value, 2) a sequence containing three int values: a) the overall frequency of the key within the node set, b) the number of distinct documents in the node set the key occurs in, c) the current position of the key in the whole list of keys returned.</xqdoc:param>
				<xqdoc:param>$max-number-returned? The maximum number of returned keys</xqdoc:param>
				<xqdoc:return>item()* : the results of the eval of the $function-reference</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:index-keys</xqdoc:name>
			<xqdoc:signature>util:index-keys($node-set as node()*, $start-value as xs:anyAtomicType?, $function-reference as function(*), $max-number-returned as xs:int?, $index as xs:string) as item()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Can be used to query existing range indexes defined on a set of nodes. All index keys defined for the given node set are reported to a callback function. The function will check for indexes defined on path as well as indexes defined by QName. </xqdoc:description>
				<xqdoc:param>$node-set* The node set</xqdoc:param>
				<xqdoc:param>$start-value? Only index keys of the same type but being greater than $start-value will be reported for non-string types. For string types, only keys starting with the given prefix are reported.</xqdoc:param>
				<xqdoc:param>$function-reference The function reference as created by the util:function function. It can be an arbitrary user-defined function, but it should take exactly 2 arguments: 1) the current index key as found in the range index as an atomic value, 2) a sequence containing three int values: a) the overall frequency of the key within the node set, b) the number of distinct documents in the node set the key occurs in, c) the current position of the key in the whole list of keys returned.</xqdoc:param>
				<xqdoc:param>$max-number-returned? The maximum number of returned keys</xqdoc:param>
				<xqdoc:param>$index The index in which the search is made</xqdoc:param>
				<xqdoc:return>item()* : the results of the eval of the $function-reference</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:index-keys-by-qname</xqdoc:name>
			<xqdoc:signature>util:index-keys-by-qname($qname as xs:QName*, $start-value as xs:anyAtomicType?, $function-reference as function(*), $max-number-returned as xs:int?, $index as xs:string) as item()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Can be used to query existing range indexes defined on a set of nodes. All index keys defined for the given node set are reported to a callback function. The function will check for indexes defined on path as well as indexes defined by QName. </xqdoc:description>
				<xqdoc:param>$qname* The node set</xqdoc:param>
				<xqdoc:param>$start-value? Only index keys of the same type but being greater than $start-value will be reported for non-string types. For string types, only keys starting with the given prefix are reported.</xqdoc:param>
				<xqdoc:param>$function-reference The function reference as created by the util:function function. It can be an arbitrary user-defined function, but it should take exactly 2 arguments: 1) the current index key as found in the range index as an atomic value, 2) a sequence containing three int values: a) the overall frequency of the key within the node set, b) the number of distinct documents in the node set the key occurs in, c) the current position of the key in the whole list of keys returned.</xqdoc:param>
				<xqdoc:param>$max-number-returned? The maximum number of returned keys</xqdoc:param>
				<xqdoc:param>$index The index in which the search is made</xqdoc:param>
				<xqdoc:return>item()* : the results of the eval of the $function-reference</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:index-type</xqdoc:name>
			<xqdoc:signature>util:index-type($set-of-nodes as node()*) as xs:string?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the range index type for a set of nodes or an empty sequence if no index is defined. </xqdoc:description>
				<xqdoc:param>$set-of-nodes* The set of nodes</xqdoc:param>
				<xqdoc:return>xs:string? : the range index type</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:inspect-function</xqdoc:name>
			<xqdoc:signature>util:inspect-function($function as function(*)) as node()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns an XML fragment describing the function referenced by the passed function item.</xqdoc:description>
				<xqdoc:param>$function The function item to inspect</xqdoc:param>
				<xqdoc:return>node() : the signature of the function</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:int-to-octal</xqdoc:name>
			<xqdoc:signature>util:int-to-octal($int as xs:int) as xs:string</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Converts an int e.g. 511 to an octal number e.g. 0777.</xqdoc:description>
				<xqdoc:param>$int The int to convert to an octal string.</xqdoc:param>
				<xqdoc:return>xs:string</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:integer-to-base</xqdoc:name>
			<xqdoc:signature>util:integer-to-base($number as xs:integer, $base as xs:integer) as xs:string</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Converts the xs:integer $number (unsigned) into base $base as xs:string. Bases 2, 8, and 16 are supported.</xqdoc:description>
				<xqdoc:param>$number The number to convert</xqdoc:param>
				<xqdoc:param>$base The base of $number</xqdoc:param>
				<xqdoc:return>xs:string : the xs:string representation of $number in base $base</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>is-binary-doc</xqdoc:name>
			<xqdoc:signature>is-binary-doc($binary-resource as xs:string?) as xs:boolean</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Checks if the resource identified by $binary-resource is a binary resource.</xqdoc:description>
				<xqdoc:param>$binary-resource? The path to the binary resource</xqdoc:param>
				<xqdoc:return>xs:boolean : true if the resource is a binary document</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:is-module-mapped</xqdoc:name>
			<xqdoc:signature>util:is-module-mapped($namespace-uri as xs:string) as xs:boolean</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns a Boolean value if the module statically mapped to a source location in the configuration file.</xqdoc:description>
				<xqdoc:param>$namespace-uri The namespace URI of the module</xqdoc:param>
				<xqdoc:return>xs:boolean : true if the namespace URI is mapped as an active function module</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:is-module-registered</xqdoc:name>
			<xqdoc:signature>util:is-module-registered($namespace-uri as xs:string) as xs:boolean</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns a Boolean value if the module identified by the namespace URI is registered.</xqdoc:description>
				<xqdoc:param>$namespace-uri The namespace URI of the module</xqdoc:param>
				<xqdoc:return>xs:boolean : true if the namespace URI is registered as an active function module</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:line-number</xqdoc:name>
			<xqdoc:signature>util:line-number() as xs:integer</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Retrieves the line number of the expression</xqdoc:description>
				<xqdoc:return>xs:integer : The line number of this expression</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:list-functions</xqdoc:name>
			<xqdoc:signature>util:list-functions() as function(*)*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns a sequence of function items for each function in the current module.</xqdoc:description>
				<xqdoc:return>function(*)* : sequence of function references</xqdoc:return>
				<xqdoc:deprecated>Moved to the module: http://exist-db.org/xquery/inspection, you should now use 'inspect:module-functions' instead!
This function could be removed in the next major release version.</xqdoc:deprecated>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:list-functions</xqdoc:name>
			<xqdoc:signature>util:list-functions($namespace-uri as xs:string) as function(*)*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns a sequence of function items for each function in the specified module.</xqdoc:description>
				<xqdoc:param>$namespace-uri The namespace URI of the function module</xqdoc:param>
				<xqdoc:return>function(*)* : sequence of function references</xqdoc:return>
				<xqdoc:deprecated>Moved to the module: http://exist-db.org/xquery/inspection, you should now use 'inspect:module-functions' instead!
This function could be removed in the next major release version.</xqdoc:deprecated>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:log</xqdoc:name>
			<xqdoc:signature>util:log($priority as xs:string, $message as item()*) as item()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Logs the message to the current logger.</xqdoc:description>
				<xqdoc:param>$priority The logging priority: 'error', 'warn', 'debug', 'info', 'trace'</xqdoc:param>
				<xqdoc:param>$message* The message to log</xqdoc:param>
				<xqdoc:return>item()</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:log-app</xqdoc:name>
			<xqdoc:signature>util:log-app($priority as xs:string, $logger-name as xs:string, $message as item()*) as item()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Logs the message to the named logger</xqdoc:description>
				<xqdoc:param>$priority The logging priority: 'error', 'warn', 'debug', 'info', 'trace'</xqdoc:param>
				<xqdoc:param>$logger-name The name of the logger, eg: my.app.log</xqdoc:param>
				<xqdoc:param>$message* The message to log</xqdoc:param>
				<xqdoc:return>item()</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:log-system-err</xqdoc:name>
			<xqdoc:signature>util:log-system-err($message as item()*) as item()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Logs the message to System.err.</xqdoc:description>
				<xqdoc:param>$message* The message to log</xqdoc:param>
				<xqdoc:return>item()</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:log-system-out</xqdoc:name>
			<xqdoc:signature>util:log-system-out($message as item()*) as item()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Logs the message to System.out.</xqdoc:description>
				<xqdoc:param>$message* The message to log</xqdoc:param>
				<xqdoc:return>item()</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:map-module</xqdoc:name>
			<xqdoc:signature>util:map-module($namespace-uri as xs:string, $location-uri as xs:string) as item()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Map the module to a source location. This function is only available to the DBA role.</xqdoc:description>
				<xqdoc:param>$namespace-uri The namespace URI of the module</xqdoc:param>
				<xqdoc:param>$location-uri The location URI of the module</xqdoc:param>
				<xqdoc:return>item() : Returns an empty sequence</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:mapped-modules</xqdoc:name>
			<xqdoc:signature>util:mapped-modules() as xs:string+</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns a sequence containing the namespace URIs of all XQuery modules which are statically mapped to a source location in the configuration file. This does not include any built in modules.</xqdoc:description>
				<xqdoc:return>xs:string+ : the sequence of all of the active function modules namespace URIs</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:node-by-id</xqdoc:name>
			<xqdoc:signature>util:node-by-id($document as node(), $node-id as xs:string) as node()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Retrieves a node by its internal node-id. The document is specified via the first argument. It may either be a document node or another node from the same document from which the target node will be retrieved by its id. The second argument is the internal node-id, specified as a string. Please note: the function does not check if the passed id does really point to an existing node. It just returns a pointer, which may thus be invalid.</xqdoc:description>
				<xqdoc:param>$document The document whose node is to be retrieved by its id</xqdoc:param>
				<xqdoc:param>$node-id The internal node id</xqdoc:param>
				<xqdoc:return>node() : the node</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:node-id</xqdoc:name>
			<xqdoc:signature>util:node-id($node as node()) as xs:string</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the internal node-id of a node. The internal node-id uniquely identifies a node within its document. It is encoded as a long number.</xqdoc:description>
				<xqdoc:param>$node The node to get the internal node-id from</xqdoc:param>
				<xqdoc:return>xs:string : the internal node-id</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:node-xpath</xqdoc:name>
			<xqdoc:signature>util:node-xpath($node as node()) as xs:string?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the XPath for a Node.</xqdoc:description>
				<xqdoc:param>$node The node to retrieve the XPath to</xqdoc:param>
				<xqdoc:return>xs:string? : the XPath expression of the node</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:octal-to-int</xqdoc:name>
			<xqdoc:signature>util:octal-to-int($octal as xs:string) as xs:int</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Converts an octal string e.g. '0777' to an int e.g. 511.</xqdoc:description>
				<xqdoc:param>$octal The octal string to convert to an int.</xqdoc:param>
				<xqdoc:return>xs:int</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:parse-html</xqdoc:name>
			<xqdoc:signature>util:parse-html($to-be-parsed as xs:string?) as document-node()?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Parses the passed string value into an XML fragment. The HTML string may not be well-formed XML. It will be passed through the Neko HTML parser to make it well-formed. An empty sequence is returned if the argument is an empty string or sequence.</xqdoc:description>
				<xqdoc:param>$to-be-parsed? The string to be parsed</xqdoc:param>
				<xqdoc:return>document-node()? : the XML fragment parsed from the string</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:qname-index-lookup</xqdoc:name>
			<xqdoc:signature>util:qname-index-lookup($qname as xs:QName, $comparison-value as xs:anyAtomicType) as node()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Can be used to query existing qname indexes defined on a set of nodes. </xqdoc:description>
				<xqdoc:param>$qname The QName</xqdoc:param>
				<xqdoc:param>$comparison-value The comparison value</xqdoc:param>
				<xqdoc:return>node()* : the result</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:random</xqdoc:name>
			<xqdoc:signature>util:random() as xs:double</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns a random number between 0.0 and 1.0</xqdoc:description>
				<xqdoc:return>xs:double : a random number between 0.0 and 1.0</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:random</xqdoc:name>
			<xqdoc:signature>util:random($max as xs:integer) as xs:integer</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns a random number between 0 (inclusive) and $max (exclusive), that is, a number greater than or equal to 0 but less than $max</xqdoc:description>
				<xqdoc:param>$max A number to be used as the exclusive maximum value for the random number; the return value will be less than this number.</xqdoc:param>
				<xqdoc:return>xs:integer : a random number between 0 and $max</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:random-ulong</xqdoc:name>
			<xqdoc:signature>util:random-ulong() as xs:unsignedLong</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns a random number between 0 and the maximum xs:unsignedLong</xqdoc:description>
				<xqdoc:return>xs:unsignedLong : a random number between 0 and the maximum xs:unsignedLong</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:registered-functions</xqdoc:name>
			<xqdoc:signature>util:registered-functions() as xs:string+</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns a sequence containing the QNames of all functions currently known to the system, including functions in imported and built-in modules.</xqdoc:description>
				<xqdoc:return>xs:string+ : the sequence of function names</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:registered-functions</xqdoc:name>
			<xqdoc:signature>util:registered-functions($namespace-uri as xs:string) as xs:string+</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns a sequence containing the QNames of all functions declared in the module identified by the specified namespace URI. An error is raised if no module is found for the specified URI.</xqdoc:description>
				<xqdoc:param>$namespace-uri The namespace URI of the function module</xqdoc:param>
				<xqdoc:return>xs:string+ : the sequence of function names</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:registered-modules</xqdoc:name>
			<xqdoc:signature>util:registered-modules() as xs:string+</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns a sequence containing the namespace URIs of all modules currently known to the system, including built in and imported modules.</xqdoc:description>
				<xqdoc:return>xs:string+ : the sequence of all of the active function modules namespace URIs</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:shared-lock</xqdoc:name>
			<xqdoc:signature>util:shared-lock($nodes as node()*, $expression as item()*) as item()*</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Puts a shared lock on the owner documents of all nodes in the first argument $nodes. Then evaluates the expressions in the second argument $expression and releases the acquired locks aftertheir completion.</xqdoc:description>
				<xqdoc:param>$nodes* The nodes that the shared lock will be placed on their owning documents.</xqdoc:param>
				<xqdoc:param>$expression* The expression to be evaluated before the acquired locks are released.</xqdoc:param>
				<xqdoc:return>item()* : the results of the evaluation of the expression(s)</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:string-to-binary</xqdoc:name>
			<xqdoc:signature>util:string-to-binary($encoded-string as xs:string?) as xs:base64Binary?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the contents of a string as an base64binary value. The string data is transformed into a binary using the encoding specified in the optional second argument or the default of UTF-8.</xqdoc:description>
				<xqdoc:param>$encoded-string? The string containing the encoded binary resource</xqdoc:param>
				<xqdoc:return>xs:base64Binary? : the binary resource</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:string-to-binary</xqdoc:name>
			<xqdoc:signature>util:string-to-binary($encoded-string as xs:string?, $encoding as xs:string) as xs:base64Binary?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the contents of a string as a base64binary value. The string data is transformed into a binary using the encoding specified in the optional second argument or the default of UTF-8.</xqdoc:description>
				<xqdoc:param>$encoded-string? The string containing the encoded binary resource</xqdoc:param>
				<xqdoc:param>$encoding the encoding type.  i.e. 'UTF-8'</xqdoc:param>
				<xqdoc:return>xs:base64Binary? : the binary resource</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:system-date</xqdoc:name>
			<xqdoc:signature>util:system-date() as xs:date</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the current xs:date (with timezone) as reported by the Java method System.currentTimeMillis(). Contrary to fn:current-date, this function is not stable, i.e. the returned xs:date will change during the evaluation time of a query and can be used to measure time differences.</xqdoc:description>
				<xqdoc:return>xs:date : the current xs:date (with timezone)</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:system-dateTime</xqdoc:name>
			<xqdoc:signature>util:system-dateTime() as xs:dateTime</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the current xs:dateTime (with timezone) as reported by the Java method System.currentTimeMillis(). Contrary to fn:current-dateTime, this function is not stable, i.e. the returned xs:dateTime will change during the evaluation time of a query and can be used to measure time differences.</xqdoc:description>
				<xqdoc:return>xs:dateTime : the current xs:dateTime (with timezone)</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:system-property</xqdoc:name>
			<xqdoc:signature>util:system-property($property-name as xs:string) as xs:string?</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the value of a system property. Similar to the corresponding XSLT function. Predefined properties are: vendor, vendor-url, product-name, product-version, product-build, and all Java system properties.</xqdoc:description>
				<xqdoc:param>$property-name The name of the system property to retrieve the value of.</xqdoc:param>
				<xqdoc:return>xs:string? : the value of the named system property</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:system-time</xqdoc:name>
			<xqdoc:signature>util:system-time() as xs:time</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns the current xs:time (with timezone) as reported by the Java method System.currentTimeMillis(). Contrary to fn:current-time, this function is not stable, i.e. the returned xs:time will change during the evaluation time of a query and can be used to measure time differences.</xqdoc:description>
				<xqdoc:return>xs:time : the current xs:time (with timezone)</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:unescape-uri</xqdoc:name>
			<xqdoc:signature>util:unescape-uri($escaped-string as xs:string, $encoding as xs:string) as xs:string</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Returns an un-escaped URL escaped string with the encoding scheme (e.g. "UTF-8"). Decodes encoded sensitive characters from a URL, for example "%2F" becomes "/", i.e. does the oposite to escape-uri()</xqdoc:description>
				<xqdoc:param>$escaped-string The escaped string to be un-escaped</xqdoc:param>
				<xqdoc:param>$encoding The encoding scheme to use in the un-escaping of the string</xqdoc:param>
				<xqdoc:return>xs:string : the un-escaped string</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:unmap-module</xqdoc:name>
			<xqdoc:signature>util:unmap-module($namespace-uri as xs:string) as item()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Remove relation between module namespace and source location. This function is only available to the DBA role.</xqdoc:description>
				<xqdoc:param>$namespace-uri The namespace URI of the module</xqdoc:param>
				<xqdoc:return>item() : Returns an empty sequence</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:uuid</xqdoc:name>
			<xqdoc:signature>util:uuid() as xs:string</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Generate a version 4 (random) universally unique identifier (UUID) string, e.g. 154ad200-9c79-44f3-8cff-9780d91552a6</xqdoc:description>
				<xqdoc:return>xs:string : a generated UUID string</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:uuid</xqdoc:name>
			<xqdoc:signature>util:uuid($name as item()) as xs:string</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Generate a version 3 universally unique identifier (UUID) string, e.g. 2b92ddb6-8e4e-3891-b519-afa1609ced73</xqdoc:description>
				<xqdoc:param>$name The input value for UUID calculation.</xqdoc:param>
				<xqdoc:return>xs:string : a generated UUID string</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
		<xqdoc:function>
			<xqdoc:name>util:wait</xqdoc:name>
			<xqdoc:signature>util:wait($interval as xs:integer) as item()</xqdoc:signature>
			<xqdoc:comment>
				<xqdoc:description>Wait for the specified number of milliseconds</xqdoc:description>
				<xqdoc:param>$interval Number of milliseconds to wait.</xqdoc:param>
				<xqdoc:return>item() : Returns an empty sequence</xqdoc:return>
			</xqdoc:comment>
		</xqdoc:function>
	</xqdoc:functions>
</xqdoc:xqdoc>