<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
    <xqdoc:control>
        <xqdoc:date>2019-05-14T12:08:24.519-04:00</xqdoc:date>
        <xqdoc:location>java:org.exist.xquery.modules.ngram.NGramModule</xqdoc:location>
    </xqdoc:control>
    <xqdoc:module type="library">
        <xqdoc:uri>http://exist-db.org/xquery/ngram</xqdoc:uri>
        <xqdoc:name>ngram</xqdoc:name>
        <xqdoc:comment>
            <xqdoc:description>A module for NGram-based indexed searching.</xqdoc:description>
        </xqdoc:comment>
    </xqdoc:module>
    <xqdoc:functions>
        <xqdoc:function>
            <xqdoc:name>ngram:add-match</xqdoc:name>
            <xqdoc:signature>ngram:add-match($node-set as node()?) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>For each of the nodes in the argument sequence, mark the entire first text descendant as a text match, just as if it had been found through a search operation. At serialization time, the text node will be enclosed in an &amp;lt;exist:match&amp;gt; tag, which facilitates further processing by the kwic module or match highlighting. The function is not directly related to the NGram indexand works without an index; it just uses the NGram module's match processor.</xqdoc:description>
                <xqdoc:param>$node-set? The node set</xqdoc:param>
                <xqdoc:return>node()* : a node set containing nodes that do not have descendent nodes.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>ngram:contains</xqdoc:name>
            <xqdoc:signature>ngram:contains($nodes as node()*, $queryString as xs:string?) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Similar to the standard XQuery fn:contains function, but based on the NGram index. Searches the given $queryString in the index defined on the input node set $nodes. String comparison is case insensitive. Nodes need to have an ngram index to be searched.The string may appear at any position within the node content.</xqdoc:description>
                <xqdoc:param>$nodes* The input node set to search</xqdoc:param>
                <xqdoc:param>$queryString? The exact string to search for</xqdoc:param>
                <xqdoc:return>node()* : a set of nodes from the input node set $nodes containing the query string or the empty sequence</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>ngram:ends-with</xqdoc:name>
            <xqdoc:signature>ngram:ends-with($nodes as node()*, $queryString as xs:string?) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Similar to the standard XQuery fn:ends-with function, but based on the NGram index. Searches the given $queryString in the index defined on the input node set $nodes. String comparison is case insensitive. Nodes need to have an ngram index to be searched.The string has to appear at the end of the node's content.</xqdoc:description>
                <xqdoc:param>$nodes* The input node set to search</xqdoc:param>
                <xqdoc:param>$queryString? The exact string to search for</xqdoc:param>
                <xqdoc:return>node()* : a set of nodes from the input node set $nodes ending with the query string or the empty sequence</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>ngram:starts-with</xqdoc:name>
            <xqdoc:signature>ngram:starts-with($nodes as node()*, $queryString as xs:string?) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Similar to the standard XQuery fn:starts-with function, but based on the NGram index. Searches the given $queryString in the index defined on the input node set $nodes. String comparison is case insensitive. Nodes need to have an ngram index to be searched.The string has to appear at the start of the node's content.</xqdoc:description>
                <xqdoc:param>$nodes* The input node set to search</xqdoc:param>
                <xqdoc:param>$queryString? The exact string to search for</xqdoc:param>
                <xqdoc:return>node()* : a set of nodes from the input node set $nodes starting with the query string or the empty sequence</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>ngram:wildcard-contains</xqdoc:name>
            <xqdoc:signature>ngram:wildcard-contains($nodes as node()*, $queryString as xs:string?) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Similar to the standard XQuery fn:matches function, but based on the NGram index and allowing wildcards in the query string. Searches the given $queryString in the index defined on the input node set $nodes. String comparison is case insensitive. Nodes need to have an ngram index to be searched.The string has to match the whole node's content.</xqdoc:description>
                <xqdoc:param>$nodes* The input node set to search</xqdoc:param>
                <xqdoc:param>$queryString? The string to search for.A full stop, '.', (not between brackets), without any qualifiers: Matches a single arbitrary character.A full stop, '.', (not between brackets), immediately followed by a single question mark, '?': Matches either no characters or one character.A full stop, '.', (not between brackets), immediately followed by a single asterisk, '*': Matches zero or more characters.A full stop, '.', (not between brackets), immediately followed by a single plus sign, '+': Matches one or more characters.A full stop, '.', immediately followed by a sequence of characters that matches the regular expression {[0-9]+,[0-9]+}: Matches a number of characters, where the number is no less than the number represented by the series of digits before the comma, and no greater than the number represented by the series of digits following the comma.An  expression  "[â€¦]"  matches a single character, namely any of the charactersenclosed by the brackets.  The string enclosed by the brackets cannot be empty; therefore ']' can be allowed between  the brackets, provided that it is the first character.(Thus, "[][?]" matches the three characters '[', ']' and '?'.)A circumflex accent, '^', at the start of the search string matches the start of the element content.A dollar sign, '$', at the end of the search string matches the end of the element content.One can remove the special meaning of any character mentioned above by preceding them by a backslash.Between brackets these characters stand for themselves.  Thus, "[[?*\]" matchesthe four characters '[', '?', '*' and '\'.'?', '*', '+' and character sequences matching the regular expression {[0-9]+,[0-9]+} not immediately preceeded by an unescaped period, '.', stand for themselves.'^' and '$' not at the very beginning or end of the search string, respectively, stand for themselves.</xqdoc:param>
                <xqdoc:return>node()* : a set of nodes from the input node set $nodes matching the query string or the empty sequence</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>ngram:filter-matches</xqdoc:name>
            <xqdoc:signature>ngram:filter-matches($nodes as node()*, $function-reference as function(*)) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Highlight matching strings within text nodes that resulted from a ngram search. The function takes a sequence of nodes as first argument $nodes and a callback function (defined with util:function) as second parameter $function-reference. Each node in $nodes will be copied into a new document fragment. For each ngram match found while copying a node, the callback function in $function-reference will be called once. The callback function should take 2 arguments:

1) the matching text string as xs:string,
2) the node to which this text string belongs.

The callback function should return zero or more nodes, which will be inserted into the resulting node set at the place where the matching text sequence occurred.

Note: a ngram match on mixed content may span multiple nodes. In this case, the callback function is called once for every text node which is part of the matching text sequence.</xqdoc:description>
                <xqdoc:param>$nodes* The sequence of nodes</xqdoc:param>
                <xqdoc:param>$function-reference The callback function</xqdoc:param>
                <xqdoc:return>node()* : a resulting node set</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
    </xqdoc:functions>
</xqdoc:xqdoc>