<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
    <xqdoc:control>
        <xqdoc:date>2019-05-14T12:08:24.519-04:00</xqdoc:date>
        <xqdoc:location>java:org.exist.xquery.functions.transform.TransformModule</xqdoc:location>
    </xqdoc:control>
    <xqdoc:module type="library">
        <xqdoc:uri>http://exist-db.org/xquery/transform</xqdoc:uri>
        <xqdoc:name>transform</xqdoc:name>
        <xqdoc:comment>
            <xqdoc:description>A module for dealing with XSL transformations.</xqdoc:description>
        </xqdoc:comment>
    </xqdoc:module>
    <xqdoc:functions>
        <xqdoc:function>
            <xqdoc:name>transform:transform</xqdoc:name>
            <xqdoc:signature>transform:transform($node-tree as node()*, $stylesheet as item(), $parameters as node()?) as node()?</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Applies an XSL stylesheet to the node tree passed as first argument. The stylesheet is specified in the second argument. This should either be an URI or a node. If it is an URI, it can either point to an external location or to an XSL stored in the db by using the 'xmldb:' scheme. Stylesheets are cached unless they were just created from an XML fragment and not from a complete document. Stylesheet parameters may be passed in the third argument using an XML fragment with the following structure: &lt;parameters&gt;&lt;param name="param-name1" value="param-value1"/&gt;&lt;/parameters&gt;. There are two special parameters named "exist:stop-on-warn" and "exist:stop-on-error". If set to value "yes", eXist will generate an XQuery error if the XSL processor reports a warning or error.</xqdoc:description>
                <xqdoc:param>$node-tree* The source-document (node tree)</xqdoc:param>
                <xqdoc:param>$stylesheet The XSL stylesheet</xqdoc:param>
                <xqdoc:param>$parameters? The transformer parameters</xqdoc:param>
                <xqdoc:return>node()? : the transformed result (node tree)</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>transform:transform</xqdoc:name>
            <xqdoc:signature>transform:transform($node-tree as node()*, $stylesheet as item(), $parameters as node()?, $attributes as node()?, $serialization-options as xs:string?) as node()?</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Applies an XSL stylesheet to the node tree passed as first argument. The stylesheet is specified in the second argument. This should either be an URI or a node. If it is an URI, it can either point to an external location or to an XSL stored in the db by using the 'xmldb:' scheme. Stylesheets are cached unless they were just created from an XML fragment and not from a complete document. Stylesheet parameters may be passed in the third argument using an XML fragment with the following structure: &lt;parameters&gt;&lt;param name="param-name" value="param-value"/&gt;&lt;/parameters&gt;. There are two special parameters named "exist:stop-on-warn" and "exist:stop-on-error". If set to value "yes", eXist will generate an XQuery error if the XSL processor reports a warning or error. The fourth argument specifies attributes to be set on the used Java TransformerFactory with the following structure: &lt;attributes&gt;&lt;attr name="attr-name" value="attr-value"/&gt;&lt;/attributes&gt;.  The fifth argument specifies serialization options in the same way as if they were passed to "declare option exist:serialize" expression. An additional serialization option, "xinclude-path", is supported, which specifies a base path against which xincludes will be expanded (if there are xincludes in the document). A relative path will be relative to the current module load path.</xqdoc:description>
                <xqdoc:param>$node-tree* The source-document (node tree)</xqdoc:param>
                <xqdoc:param>$stylesheet The XSL stylesheet</xqdoc:param>
                <xqdoc:param>$parameters? The transformer parameters</xqdoc:param>
                <xqdoc:param>$attributes? Attributes to pass to the transformation factory</xqdoc:param>
                <xqdoc:param>$serialization-options? The serialization options</xqdoc:param>
                <xqdoc:return>node()? : the transformed result (node tree)</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>transform:stream-transform</xqdoc:name>
            <xqdoc:signature>transform:stream-transform($node-tree as node()*, $stylesheet as item(), $parameters as node()?) as item()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Applies an XSL stylesheet to the node tree passed as first argument. The parameters are the same as for the transform function. stream-transform can only be used within a servlet context. Instead of returning the transformed document fragment, it directly streams its output to the servlet's output stream. It should thus be the last statement in the XQuery.</xqdoc:description>
                <xqdoc:param>$node-tree* The source-document (node tree)</xqdoc:param>
                <xqdoc:param>$stylesheet The XSL stylesheet</xqdoc:param>
                <xqdoc:param>$parameters? The transformer parameters</xqdoc:param>
                <xqdoc:return>item()</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>transform:stream-transform</xqdoc:name>
            <xqdoc:signature>transform:stream-transform($node-tree as node()*, $stylesheet as item(), $parameters as node()?, $attributes as node()?, $serialization-options as xs:string?) as item()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Applies an XSL stylesheet to the node tree passed as first argument. The parameters are the same as for the transform function. stream-transform can only be used within a servlet context. Instead of returning the transformed document fragment, it directly streams its output to the servlet's output stream. It should thus be the last statement in the XQuery.</xqdoc:description>
                <xqdoc:param>$node-tree* The source-document (node tree)</xqdoc:param>
                <xqdoc:param>$stylesheet The XSL stylesheet</xqdoc:param>
                <xqdoc:param>$parameters? The transformer parameters</xqdoc:param>
                <xqdoc:param>$attributes? Attributes to pass to the transformation factory</xqdoc:param>
                <xqdoc:param>$serialization-options? The serialization options</xqdoc:param>
                <xqdoc:return>item()</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
    </xqdoc:functions>
</xqdoc:xqdoc>