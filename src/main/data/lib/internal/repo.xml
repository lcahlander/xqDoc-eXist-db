<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
    <xqdoc:control>
        <xqdoc:date>2019-05-14T12:08:24.519-04:00</xqdoc:date>
        <xqdoc:location>java:org.exist.xquery.modules.expathrepo.ExpathPackageModule</xqdoc:location>
    </xqdoc:control>
    <xqdoc:module type="library">
        <xqdoc:uri>http://exist-db.org/xquery/repo</xqdoc:uri>
        <xqdoc:name>repo</xqdoc:name>
        <xqdoc:comment>
            <xqdoc:description>A module for working with expath repository manager</xqdoc:description>
        </xqdoc:comment>
    </xqdoc:module>
    <xqdoc:functions>
        <xqdoc:function>
            <xqdoc:name>repo:deploy</xqdoc:name>
            <xqdoc:signature>repo:deploy($pkgName as xs:string) as element()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Deploy an application package. Installs package contents to the specified target collection, using the permissions defined by the &amp;lt;permissions&amp;gt; element in repo.xml. Pre- and post-install XQuery scripts can be specified via the &amp;lt;prepare&amp;gt; and &amp;lt;finish&amp;gt; elements.</xqdoc:description>
                <xqdoc:param>$pkgName package name</xqdoc:param>
                <xqdoc:return>element() : &lt;status result="ok"/&gt; if deployment was ok. Throws an error otherwise.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>repo:deploy</xqdoc:name>
            <xqdoc:signature>repo:deploy($pkgName as xs:string, $targetCollection as xs:string) as element()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Deploy an application package. Installs package contents to the specified target collection, using the permissions defined by the &amp;lt;permissions&amp;gt; element in repo.xml. Pre- and post-install XQuery scripts can be specified via the &amp;lt;prepare&amp;gt; and &amp;lt;finish&amp;gt; elements.</xqdoc:description>
                <xqdoc:param>$pkgName package name</xqdoc:param>
                <xqdoc:param>$targetCollection the target collection into which the package will be stored</xqdoc:param>
                <xqdoc:return>element() : &lt;status result="ok"/&gt; if deployment was ok. Throws an error otherwise.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>repo:install-and-deploy</xqdoc:name>
            <xqdoc:signature>repo:install-and-deploy($pkgName as xs:string, $publicRepoURL as xs:string) as element()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Downloads, installs and deploys a package from the public repository at $publicRepoURL. Dependencies are resolved automatically. For downloading the package, the package name is appended to the repository URL as parameter 'name'.</xqdoc:description>
                <xqdoc:param>$pkgName Unique name of the package to install.</xqdoc:param>
                <xqdoc:param>$publicRepoURL The URL of the public repo.</xqdoc:param>
                <xqdoc:return>element() : &lt;status result="ok"/&gt; if deployment was ok. Throws an error otherwise.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>repo:install-and-deploy</xqdoc:name>
            <xqdoc:signature>repo:install-and-deploy($pkgName as xs:string, $version as xs:string?, $publicRepoURL as xs:string) as element()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Downloads, installs and deploys a package from the public repository at $publicRepoURL. Dependencies are resolved automatically. For downloading the package, the package name and version are appended to the repository URL as parameters 'name' and 'version'.</xqdoc:description>
                <xqdoc:param>$pkgName Unique name of the package to install.</xqdoc:param>
                <xqdoc:param>$version? Version to install.</xqdoc:param>
                <xqdoc:param>$publicRepoURL The URL of the public repo.</xqdoc:param>
                <xqdoc:return>element() : &lt;status result="ok"/&gt; if deployment was ok. Throws an error otherwise.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>repo:install-and-deploy-from-db</xqdoc:name>
            <xqdoc:signature>repo:install-and-deploy-from-db($path as xs:string) as element()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Installs and deploys a package from a .xar archive file stored in the database. Dependencies are not resolved and will just be ignored.</xqdoc:description>
                <xqdoc:param>$path Database path to the package archive (.xar file)</xqdoc:param>
                <xqdoc:return>element() : &lt;status result="ok"/&gt; if deployment was ok. Throws an error otherwise.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>repo:install-and-deploy-from-db</xqdoc:name>
            <xqdoc:signature>repo:install-and-deploy-from-db($path as xs:string, $publicRepoURL as xs:string) as element()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Installs and deploys a package from a .xar archive file stored in the database. Dependencies will be downloaded from the public repo and installed automatically.</xqdoc:description>
                <xqdoc:param>$path Database path to the package archive (.xar file)</xqdoc:param>
                <xqdoc:param>$publicRepoURL The URL of the public repo.</xqdoc:param>
                <xqdoc:return>element() : &lt;status result="ok"/&gt; if deployment was ok. Throws an error otherwise.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>repo:undeploy</xqdoc:name>
            <xqdoc:signature>repo:undeploy($pkgName as xs:string) as element()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Uninstall the resources belonging to a package from the db. Calls cleanup scripts if defined.</xqdoc:description>
                <xqdoc:param>$pkgName package name</xqdoc:param>
                <xqdoc:return>element() : &lt;status result="ok"/&gt; if deployment was ok. Throws an error otherwise.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>repo:list</xqdoc:name>
            <xqdoc:signature>repo:list() as xs:string*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>List repository packages.</xqdoc:description>
                <xqdoc:return>xs:string* : sequence of strings</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>repo:install</xqdoc:name>
            <xqdoc:signature>repo:install($pkgName as xs:string) as xs:boolean</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Install package from repository.</xqdoc:description>
                <xqdoc:param>$pkgName package name</xqdoc:param>
                <xqdoc:return>xs:boolean : true if successful, false otherwise</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>repo:install-from-db</xqdoc:name>
            <xqdoc:signature>repo:install-from-db($path as xs:string) as xs:boolean</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Install package stored in database.</xqdoc:description>
                <xqdoc:param>$path database path to the package archive (.xar file)</xqdoc:param>
                <xqdoc:return>xs:boolean : true if successful, false otherwise</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>repo:remove</xqdoc:name>
            <xqdoc:signature>repo:remove($pkgName as xs:string) as xs:boolean</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Remove package, pkgName, from repository.</xqdoc:description>
                <xqdoc:param>$pkgName package name</xqdoc:param>
                <xqdoc:return>xs:boolean : true if successful, false otherwise</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>repo:get-resource</xqdoc:name>
            <xqdoc:signature>repo:get-resource($pkgName as xs:string, $resource as xs:string) as xs:base64Binary?</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Retrieves the specified resource from an installed expath application package.</xqdoc:description>
                <xqdoc:param>$pkgName package name</xqdoc:param>
                <xqdoc:param>$resource resource path</xqdoc:param>
                <xqdoc:return>xs:base64Binary? : &lt;status result="ok"/&gt; if deployment was ok. Throws an error otherwise.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>repo:get-root</xqdoc:name>
            <xqdoc:signature>repo:get-root() as xs:string</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Returns the root collection into which applications are installed. Corresponds to the collection path defined in conf.xml (&lt;repository root="..."/&gt;) or /db if not configured.</xqdoc:description>
                <xqdoc:return>xs:string : The application root collection</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
    </xqdoc:functions>
</xqdoc:xqdoc>