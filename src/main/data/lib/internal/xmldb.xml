<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
    <xqdoc:control>
        <xqdoc:date>2019-05-14T12:08:24.519-04:00</xqdoc:date>
        <xqdoc:location>java:org.exist.xquery.functions.xmldb.XMLDBModule</xqdoc:location>
    </xqdoc:control>
    <xqdoc:module type="library">
        <xqdoc:uri>http://exist-db.org/xquery/xmldb</xqdoc:uri>
        <xqdoc:name>xmldb</xqdoc:name>
        <xqdoc:comment>
            <xqdoc:description>A module for database manipulation functions.</xqdoc:description>
        </xqdoc:comment>
    </xqdoc:module>
    <xqdoc:functions>
        <xqdoc:function>
            <xqdoc:name>xmldb:authenticate</xqdoc:name>
            <xqdoc:signature>xmldb:authenticate($collection-uri as xs:string, $user-id as xs:string?, $password as xs:string?) as xs:boolean</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Check if the user, $user-id, can authenticate against the database collection $collection-uri. The function simply tries to read the collection $collection-uri, using the credentials $user-id and $password. Collection URIs can be specified either as a simple collection path or an XMLDB URI. It returns true if the authentication succeeds, false otherwise.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$user-id? The user-id</xqdoc:param>
                <xqdoc:param>$password? The password</xqdoc:param>
                <xqdoc:return>xs:boolean : true() on successful authentication, false() otherwise</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:clear-lock</xqdoc:name>
            <xqdoc:signature>xmldb:clear-lock($collection-uri as xs:string, $resource as xs:string) as xs:string?</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Removes the user lock on the resource $resource in the collection $collection-uri.  If no lock is in place, the empty sequence is returned. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$resource The resource</xqdoc:param>
                <xqdoc:return>xs:string? : the user id of the previous lock owner, otherwise if not locked the empty sequence</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:collection-available</xqdoc:name>
            <xqdoc:signature>xmldb:collection-available($collection-uri as xs:string) as xs:boolean</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Returns true() if the collection $collection-uri exists and is available, otherwise false(). Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:return>xs:boolean : true() if the collection exists and is available, false() otherwise</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>copy-collection</xqdoc:name>
            <xqdoc:signature>copy-collection($source-collection-uri as xs:string, $target-collection-uri as xs:string) as xs:string</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Copy the collection $source-collection-uri to the collection $target-collection-uri.</xqdoc:description>
                <xqdoc:param>$source-collection-uri The source URI</xqdoc:param>
                <xqdoc:param>$target-collection-uri The target URI</xqdoc:param>
                <xqdoc:return>xs:string : The path to the newly copied collection</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>copy-collection</xqdoc:name>
            <xqdoc:signature>copy-collection($source-collection-uri as xs:string, $target-collection-uri as xs:string, $preserve as xs:boolean) as xs:string</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Copy the collection $source-collection-uri to the collection $target-collection-uri.</xqdoc:description>
                <xqdoc:param>$source-collection-uri The source URI</xqdoc:param>
                <xqdoc:param>$target-collection-uri The target URI</xqdoc:param>
                <xqdoc:param>$preserve Cause the copy process to preserve the following attributes of each source in the copy: modification time, file mode, user ID, and group ID, as allowed by permissions. Access Control Lists (ACLs) will also be preserved</xqdoc:param>
                <xqdoc:return>xs:string : The path to the newly copied collection</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>copy-resource</xqdoc:name>
            <xqdoc:signature>copy-resource($source-collection-uri as xs:string, $source-resource-name as xs:string, $target-collection-uri as xs:string, $target-resource-name as xs:string?) as xs:string</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Copy the resource $source-collection-uri/$source-resource-name to collection $target-collection-uri/$target-resource-name. If the $target-resource-name is omitted, the $source-resource-name will be used.</xqdoc:description>
                <xqdoc:param>$source-collection-uri The source URI</xqdoc:param>
                <xqdoc:param>$source-resource-name The name of the resource to copy</xqdoc:param>
                <xqdoc:param>$target-collection-uri The target URI</xqdoc:param>
                <xqdoc:param>$target-resource-name? The name of the resource for the target</xqdoc:param>
                <xqdoc:return>xs:string : The path to the newly copied resource</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>copy-resource</xqdoc:name>
            <xqdoc:signature>copy-resource($source-collection-uri as xs:string, $source-resource-name as xs:string, $target-collection-uri as xs:string, $target-resource-name as xs:string?, $preserve as xs:boolean) as xs:string</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Copy the resource $source-collection-uri/$source-resource-name to collection $target-collection-uri/$target-resource-name. If the $target-resource-name is omitted, the $source-resource-name will be used.</xqdoc:description>
                <xqdoc:param>$source-collection-uri The source URI</xqdoc:param>
                <xqdoc:param>$source-resource-name The name of the resource to copy</xqdoc:param>
                <xqdoc:param>$target-collection-uri The target URI</xqdoc:param>
                <xqdoc:param>$target-resource-name? The name of the resource for the target</xqdoc:param>
                <xqdoc:param>$preserve Cause the copy process to preserve the following attributes of each source in the copy: modification time, file mode, user ID, and group ID, as allowed by permissions. Access Control Lists (ACLs) will also be preserved</xqdoc:param>
                <xqdoc:return>xs:string : The path to the newly copied resource</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:create-collection</xqdoc:name>
            <xqdoc:signature>xmldb:create-collection($target-collection-uri as xs:string, $new-collection as xs:string) as xs:string?</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Create a new collection with name $new-collection as a child of $target-collection-uri. Collection URIs can be specified either as a simple collection path or an XMLDB URI.Returns the path to the new collection if successfully created, otherwise the empty sequence.</xqdoc:description>
                <xqdoc:param>$target-collection-uri The target collection URI</xqdoc:param>
                <xqdoc:param>$new-collection The name of the new collection to create</xqdoc:param>
                <xqdoc:return>xs:string? : the path to the new collection if successfully created, otherwise the empty sequence</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:created</xqdoc:name>
            <xqdoc:signature>xmldb:created($collection-uri as xs:string) as xs:dateTime</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Returns the creation date of the collection $collection-uri. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:return>xs:dateTime : the creation date</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:created</xqdoc:name>
            <xqdoc:signature>xmldb:created($collection-uri as xs:string, $resource as xs:string) as xs:dateTime</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Returns the creation date of the resource $resource in $collection-uri. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$resource The resource</xqdoc:param>
                <xqdoc:return>xs:dateTime : the creation date</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:decode</xqdoc:name>
            <xqdoc:signature>xmldb:decode($string as xs:string) as xs:string</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Decodes the string $string such that any percent encoded octets will be translated to their decoded UTF-8 representation.</xqdoc:description>
                <xqdoc:param>$string The input string</xqdoc:param>
                <xqdoc:return>xs:string : the decoded string</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:decode-uri</xqdoc:name>
            <xqdoc:signature>xmldb:decode-uri($uri as xs:anyURI) as xs:string</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Decodes the URI $uri such that any percent encoded octets will be translated to their decoded UTF-8 representation.</xqdoc:description>
                <xqdoc:param>$uri The URI</xqdoc:param>
                <xqdoc:return>xs:string : the decoded $uri as xs:string</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:defragment</xqdoc:name>
            <xqdoc:signature>xmldb:defragment($nodes as node()+) as item()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Start a defragmentation run on each document which has a node in $nodes. Fragmentation may occur if nodes are inserted into a document using XQuery update extensions. Please note that defragmenting a document changes its internal structure, so any references to this document will become invalid, in particular, variables pointing to some nodes in the document.</xqdoc:description>
                <xqdoc:param>$nodes+ The sequence of nodes from the documents to defragment</xqdoc:param>
                <xqdoc:return>item()</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:defragment</xqdoc:name>
            <xqdoc:signature>xmldb:defragment($nodes as node()+, $integer as xs:integer) as item()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Start a defragmentation run on each document which has a node in $nodes. Fragmentation may occur if nodes are inserted into a document using XQuery update extensions. The second argument specifies the minimum number of fragmented pages which should be in a document before it is considered for defragmentation. Please note that defragmenting a document changes its internal structure, so any references to this document will become invalid, in particular, variables pointing to some nodes in the document.</xqdoc:description>
                <xqdoc:param>$nodes+ The sequence of nodes from the documents to defragment</xqdoc:param>
                <xqdoc:param>$integer The minimum number of fragmented pages required before defragmenting</xqdoc:param>
                <xqdoc:return>item()</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:document-has-lock</xqdoc:name>
            <xqdoc:signature>xmldb:document-has-lock($collection-uri as xs:string, $resource as xs:string) as xs:string?</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Returns the user-id of the user that holds a write lock on the resource $resource in the collection $collection-uri.  If no lock is in place, the empty sequence is returned. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$resource The resource</xqdoc:param>
                <xqdoc:return>xs:string? : the user id of the lock owner, otherwise if not locked the empty sequence</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:encode</xqdoc:name>
            <xqdoc:signature>xmldb:encode($string as xs:string) as xs:string</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Encodes the string $string such that it will be a valid collection or resource path. Provides similar functionality to java's URLEncoder.encode() function, with some enhancements.</xqdoc:description>
                <xqdoc:param>$string The input string</xqdoc:param>
                <xqdoc:return>xs:string : the URL encoded string</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:encode-uri</xqdoc:name>
            <xqdoc:signature>xmldb:encode-uri($string as xs:string) as xs:anyURI</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Encodes the string $string such that it will be a valid collection or resource path. Provides similar functionality to java's URLEncoder.encode() function, with some enhancements. Returns an xs:anyURI object representing a valid XmldbURI</xqdoc:description>
                <xqdoc:param>$string The input string</xqdoc:param>
                <xqdoc:return>xs:anyURI : the XmldbURI encoded from $string</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:find-last-modified-since</xqdoc:name>
            <xqdoc:signature>xmldb:find-last-modified-since($node-set as node()*, $since as xs:dateTime) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Filters the given node set to only include nodes from resources which were modified since the specified date time.</xqdoc:description>
                <xqdoc:param>$node-set* A node set</xqdoc:param>
                <xqdoc:param>$since Date</xqdoc:param>
                <xqdoc:return>node()* : the filtered node set.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:find-last-modified-until</xqdoc:name>
            <xqdoc:signature>xmldb:find-last-modified-until($node-set as node()*, $until as xs:dateTime) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Filters the given node set to only include nodes from resources which were modified until the specified date time.</xqdoc:description>
                <xqdoc:param>$node-set* A node set</xqdoc:param>
                <xqdoc:param>$until Date</xqdoc:param>
                <xqdoc:return>node()* : the filtered node set.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:get-child-collections</xqdoc:name>
            <xqdoc:signature>xmldb:get-child-collections($collection-uri as xs:string) as xs:string*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Returns the names of the child collections in the collection $collection-uri. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:return>xs:string* : the sequence of child collection names</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:get-child-resources</xqdoc:name>
            <xqdoc:signature>xmldb:get-child-resources($collection-uri as item()) as xs:string*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Returns the names of the child resources in collection $collection-uri. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:return>xs:string* : the sequence of resource names</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:get-mime-type</xqdoc:name>
            <xqdoc:signature>xmldb:get-mime-type($resource-uri as xs:anyURI) as xs:string?</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Returns the MIME type if available of the resource $resource-uri, otherwise the empty sequence. Resource URIs can be specified either as a simple collection path, an XMLDB URI or any URI.</xqdoc:description>
                <xqdoc:param>$resource-uri The resource URI</xqdoc:param>
                <xqdoc:return>xs:string? : the mime-type if available, otherwise the empty sequence</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:last-modified</xqdoc:name>
            <xqdoc:signature>xmldb:last-modified($collection-uri as item(), $resource as xs:string) as xs:dateTime?</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Returns the last-modification date of resource $resource in collection $collection-uri. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$resource The resource</xqdoc:param>
                <xqdoc:return>xs:dateTime? : the last modification date</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:login</xqdoc:name>
            <xqdoc:signature>xmldb:login($collection-uri as xs:string, $user-id as xs:string?, $password as xs:string?) as xs:boolean</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Login the user, $user-id, and set it as the owner of the currently executing XQuery. Collection URIs can be specified either as a simple collection path or an XMLDB URI. It returns true if the authentication succeeds, false otherwise. If called from a HTTP context the login is cached for the lifetime of the HTTP session and may be used for any XQuery run in that session. If an HTTP session does not already exist, none will be created.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$user-id? The user-id</xqdoc:param>
                <xqdoc:param>$password? The password</xqdoc:param>
                <xqdoc:return>xs:boolean : true() on successful authentication and owner elevation, false() otherwise</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:login</xqdoc:name>
            <xqdoc:signature>xmldb:login($collection-uri as xs:string, $user-id as xs:string?, $password as xs:string?, $create-session as xs:boolean?) as xs:boolean</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Login the user, $user-id, and set it as the owner of the currently executing XQuery. Collection URIs can be specified either as a simple collection path or an XMLDB URI. It returns true() if the authentication succeeds, false() otherwise. If called from a HTTP context the login is cached for the lifetime of the HTTP session and may be used for any XQueryrun in that session. $create-session specifies whether to create an HTTP session on successful authentication or not. If $create-session is false() or the empty sequence no session will be created if one does not already exist.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$user-id? The user-id</xqdoc:param>
                <xqdoc:param>$password? The password</xqdoc:param>
                <xqdoc:param>$create-session? whether to create the session or not on successful authentication, default false()</xqdoc:param>
                <xqdoc:return>xs:boolean : true() on successful authentication and owner elevation, false() otherwise</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:match-collection</xqdoc:name>
            <xqdoc:signature>xmldb:match-collection($regexp as xs:string) as xs:string*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Looks for collection names in the collection index that match the provided regexp</xqdoc:description>
                <xqdoc:param>$regexp The expression to use for matching collection names</xqdoc:param>
                <xqdoc:return>xs:string* : The names of the collections that match the expression</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:move</xqdoc:name>
            <xqdoc:signature>xmldb:move($source-collection-uri as xs:string, $target-collection-uri as xs:string) as item()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Moves the collection $source-collection-uri into the collection $target-collection-uri. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$source-collection-uri The source collection URI</xqdoc:param>
                <xqdoc:param>$target-collection-uri The target collection URI</xqdoc:param>
                <xqdoc:return>item()</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:move</xqdoc:name>
            <xqdoc:signature>xmldb:move($source-collection-uri as xs:string, $target-collection-uri as xs:string, $resource as xs:string) as item()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Moves the resource $resource from the collection $source-collection-uri into collection $target-collection-uri. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$source-collection-uri The source collection URI</xqdoc:param>
                <xqdoc:param>$target-collection-uri The target collection URI</xqdoc:param>
                <xqdoc:param>$resource The resource</xqdoc:param>
                <xqdoc:return>item()</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:register-database</xqdoc:name>
            <xqdoc:signature>xmldb:register-database($driver as xs:string, $create-db as xs:boolean) as xs:boolean</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Registers an XMLDB driver class with the XMLDB Database Manager. This is only required if you want to access a database instance different from the one that executes the XQuery.</xqdoc:description>
                <xqdoc:param>$driver The DB driver</xqdoc:param>
                <xqdoc:param>$create-db The flag to create the db if it does not exist</xqdoc:param>
                <xqdoc:return>xs:boolean : true() if successfully registered, false() otherwise</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:reindex</xqdoc:name>
            <xqdoc:signature>xmldb:reindex($collection-uri as xs:string) as xs:boolean</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Reindex collection $collection-uri. Collection URIs can be specified either as a simple collection path or an XMLDB URI. The XQuery owner must have appropriate privileges to do this, e.g. having DBA role.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:return>xs:boolean : true() if successfully reindexed, false() otherwise</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:reindex</xqdoc:name>
            <xqdoc:signature>xmldb:reindex($collection-uri as xs:string, $doc-uri as xs:string) as xs:boolean</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Reindex document $doc-uri from $collection-uri. Collection URIs can be specified either as a simple collection path or an XMLDB URI. Resource URIs can be specified either as a simple collection path, an XMLDB URI or any URI. The XQuery owner must have appropriate privileges to do this, e.g. having DBA role.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$doc-uri The document URI</xqdoc:param>
                <xqdoc:return>xs:boolean : true() if successfully reindexed, false() otherwise</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:remove</xqdoc:name>
            <xqdoc:signature>xmldb:remove($collection-uri as xs:string) as item()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Removes the collection $collection-uri and its contents from the database. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:return>item()</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:remove</xqdoc:name>
            <xqdoc:signature>xmldb:remove($collection-uri as xs:string, $resource as xs:string) as item()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Removes the resource $resource from the collection $collection-uri. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$resource The resource</xqdoc:param>
                <xqdoc:return>item()</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:rename</xqdoc:name>
            <xqdoc:signature>xmldb:rename($source-collection-uri as xs:string, $new-collection-name as xs:string) as item()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Renames the collection $source-collection-uri with new name $new-collection-name. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$source-collection-uri The source collection URI</xqdoc:param>
                <xqdoc:param>$new-collection-name The new collection name</xqdoc:param>
                <xqdoc:return>item()</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:rename</xqdoc:name>
            <xqdoc:signature>xmldb:rename($collection-uri as xs:string, $resource as xs:string, $new-resource-name as xs:string) as item()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Renames the resource $resource in collection $collection-uri with new name $new-resource-name. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$resource The resource</xqdoc:param>
                <xqdoc:param>$new-resource-name The new resource name</xqdoc:param>
                <xqdoc:return>item()</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:set-mime-type</xqdoc:name>
            <xqdoc:signature>xmldb:set-mime-type($resource-uri as xs:anyURI, $mime-type as xs:string?) as empty-sequence()</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Set the MIME type of the resource $resource-uri.Resource URIs can be specified either as a simple collection path, an XMLDB URI or any URI.</xqdoc:description>
                <xqdoc:param>$resource-uri The resource URI</xqdoc:param>
                <xqdoc:param>$mime-type? The new mime-type, use empty sequence to set default value.</xqdoc:param>
                <xqdoc:return>empty-sequence()</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:size</xqdoc:name>
            <xqdoc:signature>xmldb:size($collection-uri as xs:string, $resource as xs:string) as xs:long</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Returns the estimated size of the resource $resource (in bytes) in the collection $collection-uri. The estimation is based on the number of pages occupied by the resource. If the document is serialized back to a string, its size may be different, since parts of the structural information are stored in compressed form. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$resource The resource</xqdoc:param>
                <xqdoc:return>xs:long : the size of the pages, occupied by the resource, in bytes</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:store</xqdoc:name>
            <xqdoc:signature>xmldb:store($collection-uri as xs:string, $resource-name as xs:string?, $contents as item()) as xs:string?</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Stores a new resource into the database. The resource is stored  in the collection $collection-uri with the name $resource-name. Collection URIs can be specified either as a simple collection path or an XMLDB URI. The contents $contents, is either a node, an xs:string, a Java file object or an xs:anyURI. A node will be serialized to SAX. It becomes the root node of the new document. If $contents is of type xs:anyURI, the resource is loaded from that URI. Returns the path to the new document if successfully stored, otherwise an XPathException is thrown.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$resource-name? The resource name</xqdoc:param>
                <xqdoc:param>$contents The contents</xqdoc:param>
                <xqdoc:return>xs:string? : the path to new resource if sucessfully stored, otherwise the emtpty sequence</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:store</xqdoc:name>
            <xqdoc:signature>xmldb:store($collection-uri as xs:string, $resource-name as xs:string?, $contents as item(), $mime-type as xs:string) as xs:string?</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Stores a new resource into the database. The resource is stored  in the collection $collection-uri with the name $resource-name. Collection URIs can be specified either as a simple collection path or an XMLDB URI. The contents $contents, is either a node, an xs:string, a Java file object or an xs:anyURI. A node will be serialized to SAX. It becomes the root node of the new document. If $contents is of type xs:anyURI, the resource is loaded from that URI. The final argument $mime-type is used to specify a mime type.  If the mime-type is not a xml based type, the resource will be stored as a binary resource.Returns the path to the new document if successfully stored, otherwise an XPathException is thrown.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$resource-name? The resource name</xqdoc:param>
                <xqdoc:param>$contents The contents</xqdoc:param>
                <xqdoc:param>$mime-type The mime type</xqdoc:param>
                <xqdoc:return>xs:string? : the path to new resource if sucessfully stored, otherwise the emtpty sequence</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:store-as-binary</xqdoc:name>
            <xqdoc:signature>xmldb:store-as-binary($collection-uri as xs:string, $resource-name as xs:string?, $contents as item()) as xs:string?</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Stores a new resource into the database. The resource is stored  in the collection $collection-uri with the name $resource-name. Collection URIs can be specified either as a simple collection path or an XMLDB URI. The contents $contents, is either a node, an xs:string, a Java file object or an xs:anyURI. A node will be serialized to SAX. It becomes the root node of the new document. If $contents is of type xs:anyURI, the resource is loaded from that URI. Returns the path to the new document if successfully stored, otherwise an XPathException is thrown.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$resource-name? The resource name</xqdoc:param>
                <xqdoc:param>$contents The contents</xqdoc:param>
                <xqdoc:return>xs:string? : the path to new resource if sucessfully stored, otherwise the emtpty sequence</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:store-files-from-pattern</xqdoc:name>
            <xqdoc:signature>xmldb:store-files-from-pattern($collection-uri as xs:string, $directory as xs:string, $pattern as xs:string+) as xs:string*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Stores new resources into the database. Resources are read from the server's file system, using file patterns. The function returns a sequence of all document paths added to the db. These can be directly passed to fn:doc() to retrieve the document(s).</xqdoc:description>
                <xqdoc:param>$collection-uri The collection-uri where resources should be stored. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:param>
                <xqdoc:param>$directory The directory in the file system from where the files are read.</xqdoc:param>
                <xqdoc:param>$pattern+ The file matching pattern. Based on code from Apache's Ant, thus following the same conventions. For example: *.xml matches any file ending with .xml in the current directory, **/*.xml matches files in any directory below the current one</xqdoc:param>
                <xqdoc:return>xs:string* : the sequence of document paths</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:store-files-from-pattern</xqdoc:name>
            <xqdoc:signature>xmldb:store-files-from-pattern($collection-uri as xs:string, $directory as xs:string, $pattern as xs:string+, $mime-type as xs:string?) as xs:string*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Stores new resources into the database. Resources are read from the server's file system, using file patterns. The function returns a sequence of all document paths added to the db. These can be directly passed to fn:doc() to retrieve the document(s).</xqdoc:description>
                <xqdoc:param>$collection-uri The collection-uri where resources should be stored. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:param>
                <xqdoc:param>$directory The directory in the file system from where the files are read.</xqdoc:param>
                <xqdoc:param>$pattern+ The file matching pattern. Based on code from Apache's Ant, thus following the same conventions. For example: *.xml matches any file ending with .xml in the current directory, **/*.xml matches files in any directory below the current one</xqdoc:param>
                <xqdoc:param>$mime-type? If the mime-type is something other than 'text/xml' or 'application/xml', the resource will be stored as a binary resource.</xqdoc:param>
                <xqdoc:return>xs:string* : the sequence of document paths</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:store-files-from-pattern</xqdoc:name>
            <xqdoc:signature>xmldb:store-files-from-pattern($collection-uri as xs:string, $directory as xs:string, $pattern as xs:string+, $mime-type as xs:string?, $preserve-structure as xs:boolean) as xs:string*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Stores new resources into the database. Resources are read from the server's file system, using file patterns. The function returns a sequence of all document paths added to the db. These can be directly passed to fn:doc() to retrieve the document(s).</xqdoc:description>
                <xqdoc:param>$collection-uri The collection-uri where resources should be stored. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:param>
                <xqdoc:param>$directory The directory in the file system from where the files are read.</xqdoc:param>
                <xqdoc:param>$pattern+ The file matching pattern. Based on code from Apache's Ant, thus following the same conventions. For example: *.xml matches any file ending with .xml in the current directory, **/*.xml matches files in any directory below the current one</xqdoc:param>
                <xqdoc:param>$mime-type? If the mime-type is something other than 'text/xml' or 'application/xml', the resource will be stored as a binary resource.</xqdoc:param>
                <xqdoc:param>$preserve-structure If preserve-structure is true(), the filesystem directory structure will be mirrored in the collection. Otherwise all the matching resources, including the ones in sub-directories, will be stored in the collection given in the first argument flatly.</xqdoc:param>
                <xqdoc:return>xs:string* : the sequence of document paths</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:store-files-from-pattern</xqdoc:name>
            <xqdoc:signature>xmldb:store-files-from-pattern($collection-uri as xs:string, $directory as xs:string, $pattern as xs:string+, $mime-type as xs:string?, $preserve-structure as xs:boolean, $exclude as xs:string*) as xs:string*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Stores new resources into the database. Resources are read from the server's file system, using file patterns. The function returns a sequence of all document paths added to the db. These can be directly passed to fn:doc() to retrieve the document(s).</xqdoc:description>
                <xqdoc:param>$collection-uri The collection-uri where resources should be stored. Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:param>
                <xqdoc:param>$directory The directory in the file system from where the files are read.</xqdoc:param>
                <xqdoc:param>$pattern+ The file matching pattern. Based on code from Apache's Ant, thus following the same conventions. For example: *.xml matches any file ending with .xml in the current directory, **/*.xml matches files in any directory below the current one</xqdoc:param>
                <xqdoc:param>$mime-type? If the mime-type is something other than 'text/xml' or 'application/xml', the resource will be stored as a binary resource.</xqdoc:param>
                <xqdoc:param>$preserve-structure If preserve-structure is true(), the filesystem directory structure will be mirrored in the collection. Otherwise all the matching resources, including the ones in sub-directories, will be stored in the collection given in the first argument flatly.</xqdoc:param>
                <xqdoc:param>$exclude* A sequence of file patterns to exclude</xqdoc:param>
                <xqdoc:return>xs:string* : the sequence of document paths</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:touch</xqdoc:name>
            <xqdoc:signature>xmldb:touch($collection-uri as xs:string, $resource as xs:string) as xs:boolean</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Sets the modification time of a resource to the current system time. If not resource does not exist it is not created.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$resource The name of the resource in the collection</xqdoc:param>
                <xqdoc:return>xs:boolean : true if the modification time was updated, false otherwise.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:touch</xqdoc:name>
            <xqdoc:signature>xmldb:touch($collection-uri as xs:string, $resource as xs:string, $modification-time as xs:dateTime) as xs:boolean</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Sets the modification time of a resource.  If not resource does not exist it is not created.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$resource The name of the resource in the collection</xqdoc:param>
                <xqdoc:param>$modification-time The modification time to set on the resource</xqdoc:param>
                <xqdoc:return>xs:boolean : true if the modification time was updated, false otherwise.</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:update</xqdoc:name>
            <xqdoc:signature>xmldb:update($collection-uri as xs:string, $modifications as node()) as xs:integer</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Processes an XUpdate request, $modifications, against a collection $collection-uri. Collection URIs can be specified either as a simple collection path or an XMLDB URI.The modifications are passed in a document conforming to the XUpdate specification. http://rx4rdf.liminalzone.org/xupdate-wd.html#N1a32e0The function returns the number of modifications caused by the XUpdate.</xqdoc:description>
                <xqdoc:param>$collection-uri The collection URI</xqdoc:param>
                <xqdoc:param>$modifications The XUpdate modifications to be processed</xqdoc:param>
                <xqdoc:return>xs:integer : the number of modifications, as xs:integer, caused by the XUpdate</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
        <xqdoc:function>
            <xqdoc:name>xmldb:xcollection</xqdoc:name>
            <xqdoc:signature>xmldb:xcollection($collection-uris as xs:string+) as node()*</xqdoc:signature>
            <xqdoc:comment>
                <xqdoc:description>Returns the document nodes in the collections $collection-uris non-recursively, i.e. does not include document nodes found in sub-collections. C.f. fn:collection(). Collection URIs can be specified either as a simple collection path or an XMLDB URI.</xqdoc:description>
                <xqdoc:param>$collection-uris+ The collection URIs</xqdoc:param>
                <xqdoc:return>node()* : the document nodes from the specified collections excluding sub-collections</xqdoc:return>
            </xqdoc:comment>
        </xqdoc:function>
    </xqdoc:functions>
</xqdoc:xqdoc>